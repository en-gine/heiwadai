// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCouponNotices(t *testing.T) {
	t.Parallel()

	query := CouponNotices()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCouponNoticesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CouponNotice{}
	if err = randomize.Struct(seed, o, couponNoticeDBTypes, true, couponNoticeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CouponNotice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CouponNotices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCouponNoticesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CouponNotice{}
	if err = randomize.Struct(seed, o, couponNoticeDBTypes, true, couponNoticeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CouponNotice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := CouponNotices().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CouponNotices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCouponNoticesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CouponNotice{}
	if err = randomize.Struct(seed, o, couponNoticeDBTypes, true, couponNoticeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CouponNotice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CouponNoticeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CouponNotices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCouponNoticesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CouponNotice{}
	if err = randomize.Struct(seed, o, couponNoticeDBTypes, true, couponNoticeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CouponNotice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CouponNoticeExists(ctx, tx, o.CouponID)
	if err != nil {
		t.Errorf("Unable to check if CouponNotice exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CouponNoticeExists to return true, but got false.")
	}
}

func testCouponNoticesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CouponNotice{}
	if err = randomize.Struct(seed, o, couponNoticeDBTypes, true, couponNoticeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CouponNotice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	couponNoticeFound, err := FindCouponNotice(ctx, tx, o.CouponID)
	if err != nil {
		t.Error(err)
	}

	if couponNoticeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCouponNoticesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CouponNotice{}
	if err = randomize.Struct(seed, o, couponNoticeDBTypes, true, couponNoticeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CouponNotice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = CouponNotices().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCouponNoticesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CouponNotice{}
	if err = randomize.Struct(seed, o, couponNoticeDBTypes, true, couponNoticeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CouponNotice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := CouponNotices().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCouponNoticesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	couponNoticeOne := &CouponNotice{}
	couponNoticeTwo := &CouponNotice{}
	if err = randomize.Struct(seed, couponNoticeOne, couponNoticeDBTypes, false, couponNoticeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CouponNotice struct: %s", err)
	}
	if err = randomize.Struct(seed, couponNoticeTwo, couponNoticeDBTypes, false, couponNoticeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CouponNotice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = couponNoticeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = couponNoticeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CouponNotices().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCouponNoticesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	couponNoticeOne := &CouponNotice{}
	couponNoticeTwo := &CouponNotice{}
	if err = randomize.Struct(seed, couponNoticeOne, couponNoticeDBTypes, false, couponNoticeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CouponNotice struct: %s", err)
	}
	if err = randomize.Struct(seed, couponNoticeTwo, couponNoticeDBTypes, false, couponNoticeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CouponNotice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = couponNoticeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = couponNoticeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CouponNotices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func couponNoticeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *CouponNotice) error {
	*o = CouponNotice{}
	return nil
}

func couponNoticeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *CouponNotice) error {
	*o = CouponNotice{}
	return nil
}

func couponNoticeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *CouponNotice) error {
	*o = CouponNotice{}
	return nil
}

func couponNoticeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CouponNotice) error {
	*o = CouponNotice{}
	return nil
}

func couponNoticeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CouponNotice) error {
	*o = CouponNotice{}
	return nil
}

func couponNoticeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CouponNotice) error {
	*o = CouponNotice{}
	return nil
}

func couponNoticeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CouponNotice) error {
	*o = CouponNotice{}
	return nil
}

func couponNoticeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CouponNotice) error {
	*o = CouponNotice{}
	return nil
}

func couponNoticeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CouponNotice) error {
	*o = CouponNotice{}
	return nil
}

func testCouponNoticesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &CouponNotice{}
	o := &CouponNotice{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, couponNoticeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize CouponNotice object: %s", err)
	}

	AddCouponNoticeHook(boil.BeforeInsertHook, couponNoticeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	couponNoticeBeforeInsertHooks = []CouponNoticeHook{}

	AddCouponNoticeHook(boil.AfterInsertHook, couponNoticeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	couponNoticeAfterInsertHooks = []CouponNoticeHook{}

	AddCouponNoticeHook(boil.AfterSelectHook, couponNoticeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	couponNoticeAfterSelectHooks = []CouponNoticeHook{}

	AddCouponNoticeHook(boil.BeforeUpdateHook, couponNoticeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	couponNoticeBeforeUpdateHooks = []CouponNoticeHook{}

	AddCouponNoticeHook(boil.AfterUpdateHook, couponNoticeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	couponNoticeAfterUpdateHooks = []CouponNoticeHook{}

	AddCouponNoticeHook(boil.BeforeDeleteHook, couponNoticeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	couponNoticeBeforeDeleteHooks = []CouponNoticeHook{}

	AddCouponNoticeHook(boil.AfterDeleteHook, couponNoticeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	couponNoticeAfterDeleteHooks = []CouponNoticeHook{}

	AddCouponNoticeHook(boil.BeforeUpsertHook, couponNoticeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	couponNoticeBeforeUpsertHooks = []CouponNoticeHook{}

	AddCouponNoticeHook(boil.AfterUpsertHook, couponNoticeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	couponNoticeAfterUpsertHooks = []CouponNoticeHook{}
}

func testCouponNoticesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CouponNotice{}
	if err = randomize.Struct(seed, o, couponNoticeDBTypes, true, couponNoticeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CouponNotice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CouponNotices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCouponNoticesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CouponNotice{}
	if err = randomize.Struct(seed, o, couponNoticeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CouponNotice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(couponNoticeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := CouponNotices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCouponNoticeToOneCouponUsingCoupon(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CouponNotice
	var foreign Coupon

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, couponNoticeDBTypes, false, couponNoticeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CouponNotice struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, couponDBTypes, false, couponColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Coupon struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.CouponID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Coupon().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddCouponHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Coupon) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := CouponNoticeSlice{&local}
	if err = local.L.LoadCoupon(ctx, tx, false, (*[]*CouponNotice)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Coupon == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Coupon = nil
	if err = local.L.LoadCoupon(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Coupon == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testCouponNoticeToOneSetOpCouponUsingCoupon(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CouponNotice
	var b, c Coupon

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, couponNoticeDBTypes, false, strmangle.SetComplement(couponNoticePrimaryKeyColumns, couponNoticeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, couponDBTypes, false, strmangle.SetComplement(couponPrimaryKeyColumns, couponColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, couponDBTypes, false, strmangle.SetComplement(couponPrimaryKeyColumns, couponColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Coupon{&b, &c} {
		err = a.SetCoupon(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Coupon != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CouponNotice != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CouponID != x.ID {
			t.Error("foreign key was wrong value", a.CouponID)
		}

		if exists, err := CouponNoticeExists(ctx, tx, a.CouponID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testCouponNoticesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CouponNotice{}
	if err = randomize.Struct(seed, o, couponNoticeDBTypes, true, couponNoticeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CouponNotice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCouponNoticesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CouponNotice{}
	if err = randomize.Struct(seed, o, couponNoticeDBTypes, true, couponNoticeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CouponNotice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CouponNoticeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCouponNoticesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CouponNotice{}
	if err = randomize.Struct(seed, o, couponNoticeDBTypes, true, couponNoticeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CouponNotice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CouponNotices().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	couponNoticeDBTypes = map[string]string{`CouponID`: `uuid`, `Notice`: `text`}
	_                   = bytes.MinRead
)

func testCouponNoticesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(couponNoticePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(couponNoticeAllColumns) == len(couponNoticePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CouponNotice{}
	if err = randomize.Struct(seed, o, couponNoticeDBTypes, true, couponNoticeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CouponNotice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CouponNotices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, couponNoticeDBTypes, true, couponNoticePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CouponNotice struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCouponNoticesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(couponNoticeAllColumns) == len(couponNoticePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CouponNotice{}
	if err = randomize.Struct(seed, o, couponNoticeDBTypes, true, couponNoticeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CouponNotice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CouponNotices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, couponNoticeDBTypes, true, couponNoticePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CouponNotice struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(couponNoticeAllColumns, couponNoticePrimaryKeyColumns) {
		fields = couponNoticeAllColumns
	} else {
		fields = strmangle.SetComplement(
			couponNoticeAllColumns,
			couponNoticePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CouponNoticeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCouponNoticesUpsert(t *testing.T) {
	t.Parallel()

	if len(couponNoticeAllColumns) == len(couponNoticePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := CouponNotice{}
	if err = randomize.Struct(seed, &o, couponNoticeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CouponNotice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CouponNotice: %s", err)
	}

	count, err := CouponNotices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, couponNoticeDBTypes, false, couponNoticePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CouponNotice struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CouponNotice: %s", err)
	}

	count, err = CouponNotices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
