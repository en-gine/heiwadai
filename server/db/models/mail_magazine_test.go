// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMailMagazines(t *testing.T) {
	t.Parallel()

	query := MailMagazines()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMailMagazinesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MailMagazine{}
	if err = randomize.Struct(seed, o, mailMagazineDBTypes, true, mailMagazineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MailMagazine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MailMagazines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMailMagazinesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MailMagazine{}
	if err = randomize.Struct(seed, o, mailMagazineDBTypes, true, mailMagazineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MailMagazine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := MailMagazines().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MailMagazines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMailMagazinesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MailMagazine{}
	if err = randomize.Struct(seed, o, mailMagazineDBTypes, true, mailMagazineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MailMagazine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MailMagazineSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MailMagazines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMailMagazinesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MailMagazine{}
	if err = randomize.Struct(seed, o, mailMagazineDBTypes, true, mailMagazineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MailMagazine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MailMagazineExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if MailMagazine exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MailMagazineExists to return true, but got false.")
	}
}

func testMailMagazinesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MailMagazine{}
	if err = randomize.Struct(seed, o, mailMagazineDBTypes, true, mailMagazineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MailMagazine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	mailMagazineFound, err := FindMailMagazine(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if mailMagazineFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMailMagazinesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MailMagazine{}
	if err = randomize.Struct(seed, o, mailMagazineDBTypes, true, mailMagazineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MailMagazine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = MailMagazines().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMailMagazinesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MailMagazine{}
	if err = randomize.Struct(seed, o, mailMagazineDBTypes, true, mailMagazineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MailMagazine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := MailMagazines().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMailMagazinesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	mailMagazineOne := &MailMagazine{}
	mailMagazineTwo := &MailMagazine{}
	if err = randomize.Struct(seed, mailMagazineOne, mailMagazineDBTypes, false, mailMagazineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MailMagazine struct: %s", err)
	}
	if err = randomize.Struct(seed, mailMagazineTwo, mailMagazineDBTypes, false, mailMagazineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MailMagazine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mailMagazineOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mailMagazineTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MailMagazines().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMailMagazinesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	mailMagazineOne := &MailMagazine{}
	mailMagazineTwo := &MailMagazine{}
	if err = randomize.Struct(seed, mailMagazineOne, mailMagazineDBTypes, false, mailMagazineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MailMagazine struct: %s", err)
	}
	if err = randomize.Struct(seed, mailMagazineTwo, mailMagazineDBTypes, false, mailMagazineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MailMagazine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mailMagazineOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mailMagazineTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MailMagazines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func mailMagazineBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *MailMagazine) error {
	*o = MailMagazine{}
	return nil
}

func mailMagazineAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *MailMagazine) error {
	*o = MailMagazine{}
	return nil
}

func mailMagazineAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *MailMagazine) error {
	*o = MailMagazine{}
	return nil
}

func mailMagazineBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MailMagazine) error {
	*o = MailMagazine{}
	return nil
}

func mailMagazineAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MailMagazine) error {
	*o = MailMagazine{}
	return nil
}

func mailMagazineBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MailMagazine) error {
	*o = MailMagazine{}
	return nil
}

func mailMagazineAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MailMagazine) error {
	*o = MailMagazine{}
	return nil
}

func mailMagazineBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MailMagazine) error {
	*o = MailMagazine{}
	return nil
}

func mailMagazineAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MailMagazine) error {
	*o = MailMagazine{}
	return nil
}

func testMailMagazinesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &MailMagazine{}
	o := &MailMagazine{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, mailMagazineDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MailMagazine object: %s", err)
	}

	AddMailMagazineHook(boil.BeforeInsertHook, mailMagazineBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	mailMagazineBeforeInsertHooks = []MailMagazineHook{}

	AddMailMagazineHook(boil.AfterInsertHook, mailMagazineAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	mailMagazineAfterInsertHooks = []MailMagazineHook{}

	AddMailMagazineHook(boil.AfterSelectHook, mailMagazineAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	mailMagazineAfterSelectHooks = []MailMagazineHook{}

	AddMailMagazineHook(boil.BeforeUpdateHook, mailMagazineBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	mailMagazineBeforeUpdateHooks = []MailMagazineHook{}

	AddMailMagazineHook(boil.AfterUpdateHook, mailMagazineAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	mailMagazineAfterUpdateHooks = []MailMagazineHook{}

	AddMailMagazineHook(boil.BeforeDeleteHook, mailMagazineBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	mailMagazineBeforeDeleteHooks = []MailMagazineHook{}

	AddMailMagazineHook(boil.AfterDeleteHook, mailMagazineAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	mailMagazineAfterDeleteHooks = []MailMagazineHook{}

	AddMailMagazineHook(boil.BeforeUpsertHook, mailMagazineBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	mailMagazineBeforeUpsertHooks = []MailMagazineHook{}

	AddMailMagazineHook(boil.AfterUpsertHook, mailMagazineAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	mailMagazineAfterUpsertHooks = []MailMagazineHook{}
}

func testMailMagazinesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MailMagazine{}
	if err = randomize.Struct(seed, o, mailMagazineDBTypes, true, mailMagazineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MailMagazine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MailMagazines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMailMagazinesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MailMagazine{}
	if err = randomize.Struct(seed, o, mailMagazineDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MailMagazine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(mailMagazineColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := MailMagazines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMailMagazineToOneAdminUsingAuthorAdmin(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local MailMagazine
	var foreign Admin

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, mailMagazineDBTypes, true, mailMagazineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MailMagazine struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, adminDBTypes, false, adminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Author, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.AuthorAdmin().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddAdminHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Admin) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := MailMagazineSlice{&local}
	if err = local.L.LoadAuthorAdmin(ctx, tx, false, (*[]*MailMagazine)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.AuthorAdmin == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.AuthorAdmin = nil
	if err = local.L.LoadAuthorAdmin(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.AuthorAdmin == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testMailMagazineToOneSetOpAdminUsingAuthorAdmin(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MailMagazine
	var b, c Admin

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mailMagazineDBTypes, false, strmangle.SetComplement(mailMagazinePrimaryKeyColumns, mailMagazineColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, adminDBTypes, false, strmangle.SetComplement(adminPrimaryKeyColumns, adminColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, adminDBTypes, false, strmangle.SetComplement(adminPrimaryKeyColumns, adminColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Admin{&b, &c} {
		err = a.SetAuthorAdmin(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.AuthorAdmin != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AuthorMailMagazines[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Author, x.ID) {
			t.Error("foreign key was wrong value", a.Author)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Author))
		reflect.Indirect(reflect.ValueOf(&a.Author)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Author, x.ID) {
			t.Error("foreign key was wrong value", a.Author, x.ID)
		}
	}
}

func testMailMagazineToOneRemoveOpAdminUsingAuthorAdmin(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MailMagazine
	var b Admin

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mailMagazineDBTypes, false, strmangle.SetComplement(mailMagazinePrimaryKeyColumns, mailMagazineColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, adminDBTypes, false, strmangle.SetComplement(adminPrimaryKeyColumns, adminColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetAuthorAdmin(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveAuthorAdmin(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.AuthorAdmin().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.AuthorAdmin != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Author) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.AuthorMailMagazines) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testMailMagazinesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MailMagazine{}
	if err = randomize.Struct(seed, o, mailMagazineDBTypes, true, mailMagazineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MailMagazine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMailMagazinesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MailMagazine{}
	if err = randomize.Struct(seed, o, mailMagazineDBTypes, true, mailMagazineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MailMagazine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MailMagazineSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMailMagazinesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MailMagazine{}
	if err = randomize.Struct(seed, o, mailMagazineDBTypes, true, mailMagazineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MailMagazine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MailMagazines().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	mailMagazineDBTypes = map[string]string{`ID`: `uuid`, `Title`: `character varying`, `Content`: `character varying`, `Author`: `uuid`, `SentAt`: `timestamp with time zone`, `SentCount`: `integer`, `MailMagazineStatus`: `integer`, `CreateAt`: `timestamp with time zone`, `UpdateAt`: `timestamp with time zone`}
	_                   = bytes.MinRead
)

func testMailMagazinesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(mailMagazinePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(mailMagazineAllColumns) == len(mailMagazinePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MailMagazine{}
	if err = randomize.Struct(seed, o, mailMagazineDBTypes, true, mailMagazineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MailMagazine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MailMagazines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mailMagazineDBTypes, true, mailMagazinePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MailMagazine struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMailMagazinesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(mailMagazineAllColumns) == len(mailMagazinePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MailMagazine{}
	if err = randomize.Struct(seed, o, mailMagazineDBTypes, true, mailMagazineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MailMagazine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MailMagazines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mailMagazineDBTypes, true, mailMagazinePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MailMagazine struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(mailMagazineAllColumns, mailMagazinePrimaryKeyColumns) {
		fields = mailMagazineAllColumns
	} else {
		fields = strmangle.SetComplement(
			mailMagazineAllColumns,
			mailMagazinePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MailMagazineSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMailMagazinesUpsert(t *testing.T) {
	t.Parallel()

	if len(mailMagazineAllColumns) == len(mailMagazinePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := MailMagazine{}
	if err = randomize.Struct(seed, &o, mailMagazineDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MailMagazine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MailMagazine: %s", err)
	}

	count, err := MailMagazines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, mailMagazineDBTypes, false, mailMagazinePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MailMagazine struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MailMagazine: %s", err)
	}

	count, err = MailMagazines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
