// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/user/Messages.proto

package userconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	user "server/api/v1/user"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// MessageControllerName is the fully-qualified name of the MessageController service.
	MessageControllerName = "server.user.MessageController"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MessageControllerGetMessagesAfterProcedure is the fully-qualified name of the MessageController's
	// GetMessagesAfter RPC.
	MessageControllerGetMessagesAfterProcedure = "/server.user.MessageController/GetMessagesAfter"
)

// MessageControllerClient is a client for the server.user.MessageController service.
type MessageControllerClient interface {
	// 　ポップアップメッセージのリストを取得する（最後に取得したIDを元にリクエスト）
	GetMessagesAfter(context.Context, *connect_go.Request[user.MessageRequest]) (*connect_go.Response[user.MessagesResponse], error)
}

// NewMessageControllerClient constructs a client for the server.user.MessageController service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMessageControllerClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) MessageControllerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &messageControllerClient{
		getMessagesAfter: connect_go.NewClient[user.MessageRequest, user.MessagesResponse](
			httpClient,
			baseURL+MessageControllerGetMessagesAfterProcedure,
			opts...,
		),
	}
}

// messageControllerClient implements MessageControllerClient.
type messageControllerClient struct {
	getMessagesAfter *connect_go.Client[user.MessageRequest, user.MessagesResponse]
}

// GetMessagesAfter calls server.user.MessageController.GetMessagesAfter.
func (c *messageControllerClient) GetMessagesAfter(ctx context.Context, req *connect_go.Request[user.MessageRequest]) (*connect_go.Response[user.MessagesResponse], error) {
	return c.getMessagesAfter.CallUnary(ctx, req)
}

// MessageControllerHandler is an implementation of the server.user.MessageController service.
type MessageControllerHandler interface {
	// 　ポップアップメッセージのリストを取得する（最後に取得したIDを元にリクエスト）
	GetMessagesAfter(context.Context, *connect_go.Request[user.MessageRequest]) (*connect_go.Response[user.MessagesResponse], error)
}

// NewMessageControllerHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMessageControllerHandler(svc MessageControllerHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	messageControllerGetMessagesAfterHandler := connect_go.NewUnaryHandler(
		MessageControllerGetMessagesAfterProcedure,
		svc.GetMessagesAfter,
		opts...,
	)
	return "/server.user.MessageController/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MessageControllerGetMessagesAfterProcedure:
			messageControllerGetMessagesAfterHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMessageControllerHandler returns CodeUnimplemented from all methods.
type UnimplementedMessageControllerHandler struct{}

func (UnimplementedMessageControllerHandler) GetMessagesAfter(context.Context, *connect_go.Request[user.MessageRequest]) (*connect_go.Response[user.MessagesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.user.MessageController.GetMessagesAfter is not implemented"))
}
