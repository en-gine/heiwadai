// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/admin/Messages.proto

package adminconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	admin "server/api/v1/admin"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// MessageControllerName is the fully-qualified name of the MessageController service.
	MessageControllerName = "server.admin.MessageController"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MessageControllerGetByIDProcedure is the fully-qualified name of the MessageController's GetByID
	// RPC.
	MessageControllerGetByIDProcedure = "/server.admin.MessageController/GetByID"
	// MessageControllerGetListProcedure is the fully-qualified name of the MessageController's GetList
	// RPC.
	MessageControllerGetListProcedure = "/server.admin.MessageController/GetList"
	// MessageControllerCreateProcedure is the fully-qualified name of the MessageController's Create
	// RPC.
	MessageControllerCreateProcedure = "/server.admin.MessageController/Create"
	// MessageControllerUpdateProcedure is the fully-qualified name of the MessageController's Update
	// RPC.
	MessageControllerUpdateProcedure = "/server.admin.MessageController/Update"
	// MessageControllerDeleteProcedure is the fully-qualified name of the MessageController's Delete
	// RPC.
	MessageControllerDeleteProcedure = "/server.admin.MessageController/Delete"
)

// MessageControllerClient is a client for the server.admin.MessageController service.
type MessageControllerClient interface {
	GetByID(context.Context, *connect_go.Request[admin.MessageIDRequest]) (*connect_go.Response[admin.MessageResponse], error)
	GetList(context.Context, *connect_go.Request[admin.GetMessageRequest]) (*connect_go.Response[admin.MessagesResponse], error)
	Create(context.Context, *connect_go.Request[admin.MessageCreateRequest]) (*connect_go.Response[admin.MessageResponse], error)
	Update(context.Context, *connect_go.Request[admin.MessageUpdateRequest]) (*connect_go.Response[admin.MessageResponse], error)
	Delete(context.Context, *connect_go.Request[admin.MessageIDRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewMessageControllerClient constructs a client for the server.admin.MessageController service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMessageControllerClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) MessageControllerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &messageControllerClient{
		getByID: connect_go.NewClient[admin.MessageIDRequest, admin.MessageResponse](
			httpClient,
			baseURL+MessageControllerGetByIDProcedure,
			opts...,
		),
		getList: connect_go.NewClient[admin.GetMessageRequest, admin.MessagesResponse](
			httpClient,
			baseURL+MessageControllerGetListProcedure,
			opts...,
		),
		create: connect_go.NewClient[admin.MessageCreateRequest, admin.MessageResponse](
			httpClient,
			baseURL+MessageControllerCreateProcedure,
			opts...,
		),
		update: connect_go.NewClient[admin.MessageUpdateRequest, admin.MessageResponse](
			httpClient,
			baseURL+MessageControllerUpdateProcedure,
			opts...,
		),
		delete: connect_go.NewClient[admin.MessageIDRequest, emptypb.Empty](
			httpClient,
			baseURL+MessageControllerDeleteProcedure,
			opts...,
		),
	}
}

// messageControllerClient implements MessageControllerClient.
type messageControllerClient struct {
	getByID *connect_go.Client[admin.MessageIDRequest, admin.MessageResponse]
	getList *connect_go.Client[admin.GetMessageRequest, admin.MessagesResponse]
	create  *connect_go.Client[admin.MessageCreateRequest, admin.MessageResponse]
	update  *connect_go.Client[admin.MessageUpdateRequest, admin.MessageResponse]
	delete  *connect_go.Client[admin.MessageIDRequest, emptypb.Empty]
}

// GetByID calls server.admin.MessageController.GetByID.
func (c *messageControllerClient) GetByID(ctx context.Context, req *connect_go.Request[admin.MessageIDRequest]) (*connect_go.Response[admin.MessageResponse], error) {
	return c.getByID.CallUnary(ctx, req)
}

// GetList calls server.admin.MessageController.GetList.
func (c *messageControllerClient) GetList(ctx context.Context, req *connect_go.Request[admin.GetMessageRequest]) (*connect_go.Response[admin.MessagesResponse], error) {
	return c.getList.CallUnary(ctx, req)
}

// Create calls server.admin.MessageController.Create.
func (c *messageControllerClient) Create(ctx context.Context, req *connect_go.Request[admin.MessageCreateRequest]) (*connect_go.Response[admin.MessageResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Update calls server.admin.MessageController.Update.
func (c *messageControllerClient) Update(ctx context.Context, req *connect_go.Request[admin.MessageUpdateRequest]) (*connect_go.Response[admin.MessageResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Delete calls server.admin.MessageController.Delete.
func (c *messageControllerClient) Delete(ctx context.Context, req *connect_go.Request[admin.MessageIDRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.delete.CallUnary(ctx, req)
}

// MessageControllerHandler is an implementation of the server.admin.MessageController service.
type MessageControllerHandler interface {
	GetByID(context.Context, *connect_go.Request[admin.MessageIDRequest]) (*connect_go.Response[admin.MessageResponse], error)
	GetList(context.Context, *connect_go.Request[admin.GetMessageRequest]) (*connect_go.Response[admin.MessagesResponse], error)
	Create(context.Context, *connect_go.Request[admin.MessageCreateRequest]) (*connect_go.Response[admin.MessageResponse], error)
	Update(context.Context, *connect_go.Request[admin.MessageUpdateRequest]) (*connect_go.Response[admin.MessageResponse], error)
	Delete(context.Context, *connect_go.Request[admin.MessageIDRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewMessageControllerHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMessageControllerHandler(svc MessageControllerHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	messageControllerGetByIDHandler := connect_go.NewUnaryHandler(
		MessageControllerGetByIDProcedure,
		svc.GetByID,
		opts...,
	)
	messageControllerGetListHandler := connect_go.NewUnaryHandler(
		MessageControllerGetListProcedure,
		svc.GetList,
		opts...,
	)
	messageControllerCreateHandler := connect_go.NewUnaryHandler(
		MessageControllerCreateProcedure,
		svc.Create,
		opts...,
	)
	messageControllerUpdateHandler := connect_go.NewUnaryHandler(
		MessageControllerUpdateProcedure,
		svc.Update,
		opts...,
	)
	messageControllerDeleteHandler := connect_go.NewUnaryHandler(
		MessageControllerDeleteProcedure,
		svc.Delete,
		opts...,
	)
	return "/server.admin.MessageController/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MessageControllerGetByIDProcedure:
			messageControllerGetByIDHandler.ServeHTTP(w, r)
		case MessageControllerGetListProcedure:
			messageControllerGetListHandler.ServeHTTP(w, r)
		case MessageControllerCreateProcedure:
			messageControllerCreateHandler.ServeHTTP(w, r)
		case MessageControllerUpdateProcedure:
			messageControllerUpdateHandler.ServeHTTP(w, r)
		case MessageControllerDeleteProcedure:
			messageControllerDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMessageControllerHandler returns CodeUnimplemented from all methods.
type UnimplementedMessageControllerHandler struct{}

func (UnimplementedMessageControllerHandler) GetByID(context.Context, *connect_go.Request[admin.MessageIDRequest]) (*connect_go.Response[admin.MessageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.admin.MessageController.GetByID is not implemented"))
}

func (UnimplementedMessageControllerHandler) GetList(context.Context, *connect_go.Request[admin.GetMessageRequest]) (*connect_go.Response[admin.MessagesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.admin.MessageController.GetList is not implemented"))
}

func (UnimplementedMessageControllerHandler) Create(context.Context, *connect_go.Request[admin.MessageCreateRequest]) (*connect_go.Response[admin.MessageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.admin.MessageController.Create is not implemented"))
}

func (UnimplementedMessageControllerHandler) Update(context.Context, *connect_go.Request[admin.MessageUpdateRequest]) (*connect_go.Response[admin.MessageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.admin.MessageController.Update is not implemented"))
}

func (UnimplementedMessageControllerHandler) Delete(context.Context, *connect_go.Request[admin.MessageIDRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.admin.MessageController.Delete is not implemented"))
}
