// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Admins", testAdmins)
	t.Run("Checkins", testCheckins)
	t.Run("Coupons", testCoupons)
	t.Run("CouponAttachedUsers", testCouponAttachedUsers)
	t.Run("CouponNotices", testCouponNotices)
	t.Run("CouponStores", testCouponStores)
	t.Run("MailMagazines", testMailMagazines)
	t.Run("StayableStoreInfos", testStayableStoreInfos)
	t.Run("Stores", testStores)
	t.Run("UserData", testUserData)
	t.Run("UserManagers", testUserManagers)
	t.Run("UserOptions", testUserOptions)
}

func TestDelete(t *testing.T) {
	t.Run("Admins", testAdminsDelete)
	t.Run("Checkins", testCheckinsDelete)
	t.Run("Coupons", testCouponsDelete)
	t.Run("CouponAttachedUsers", testCouponAttachedUsersDelete)
	t.Run("CouponNotices", testCouponNoticesDelete)
	t.Run("CouponStores", testCouponStoresDelete)
	t.Run("MailMagazines", testMailMagazinesDelete)
	t.Run("StayableStoreInfos", testStayableStoreInfosDelete)
	t.Run("Stores", testStoresDelete)
	t.Run("UserData", testUserDataDelete)
	t.Run("UserManagers", testUserManagersDelete)
	t.Run("UserOptions", testUserOptionsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Admins", testAdminsQueryDeleteAll)
	t.Run("Checkins", testCheckinsQueryDeleteAll)
	t.Run("Coupons", testCouponsQueryDeleteAll)
	t.Run("CouponAttachedUsers", testCouponAttachedUsersQueryDeleteAll)
	t.Run("CouponNotices", testCouponNoticesQueryDeleteAll)
	t.Run("CouponStores", testCouponStoresQueryDeleteAll)
	t.Run("MailMagazines", testMailMagazinesQueryDeleteAll)
	t.Run("StayableStoreInfos", testStayableStoreInfosQueryDeleteAll)
	t.Run("Stores", testStoresQueryDeleteAll)
	t.Run("UserData", testUserDataQueryDeleteAll)
	t.Run("UserManagers", testUserManagersQueryDeleteAll)
	t.Run("UserOptions", testUserOptionsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Admins", testAdminsSliceDeleteAll)
	t.Run("Checkins", testCheckinsSliceDeleteAll)
	t.Run("Coupons", testCouponsSliceDeleteAll)
	t.Run("CouponAttachedUsers", testCouponAttachedUsersSliceDeleteAll)
	t.Run("CouponNotices", testCouponNoticesSliceDeleteAll)
	t.Run("CouponStores", testCouponStoresSliceDeleteAll)
	t.Run("MailMagazines", testMailMagazinesSliceDeleteAll)
	t.Run("StayableStoreInfos", testStayableStoreInfosSliceDeleteAll)
	t.Run("Stores", testStoresSliceDeleteAll)
	t.Run("UserData", testUserDataSliceDeleteAll)
	t.Run("UserManagers", testUserManagersSliceDeleteAll)
	t.Run("UserOptions", testUserOptionsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Admins", testAdminsExists)
	t.Run("Checkins", testCheckinsExists)
	t.Run("Coupons", testCouponsExists)
	t.Run("CouponAttachedUsers", testCouponAttachedUsersExists)
	t.Run("CouponNotices", testCouponNoticesExists)
	t.Run("CouponStores", testCouponStoresExists)
	t.Run("MailMagazines", testMailMagazinesExists)
	t.Run("StayableStoreInfos", testStayableStoreInfosExists)
	t.Run("Stores", testStoresExists)
	t.Run("UserData", testUserDataExists)
	t.Run("UserManagers", testUserManagersExists)
	t.Run("UserOptions", testUserOptionsExists)
}

func TestFind(t *testing.T) {
	t.Run("Admins", testAdminsFind)
	t.Run("Checkins", testCheckinsFind)
	t.Run("Coupons", testCouponsFind)
	t.Run("CouponAttachedUsers", testCouponAttachedUsersFind)
	t.Run("CouponNotices", testCouponNoticesFind)
	t.Run("CouponStores", testCouponStoresFind)
	t.Run("MailMagazines", testMailMagazinesFind)
	t.Run("StayableStoreInfos", testStayableStoreInfosFind)
	t.Run("Stores", testStoresFind)
	t.Run("UserData", testUserDataFind)
	t.Run("UserManagers", testUserManagersFind)
	t.Run("UserOptions", testUserOptionsFind)
}

func TestBind(t *testing.T) {
	t.Run("Admins", testAdminsBind)
	t.Run("Checkins", testCheckinsBind)
	t.Run("Coupons", testCouponsBind)
	t.Run("CouponAttachedUsers", testCouponAttachedUsersBind)
	t.Run("CouponNotices", testCouponNoticesBind)
	t.Run("CouponStores", testCouponStoresBind)
	t.Run("MailMagazines", testMailMagazinesBind)
	t.Run("StayableStoreInfos", testStayableStoreInfosBind)
	t.Run("Stores", testStoresBind)
	t.Run("UserData", testUserDataBind)
	t.Run("UserManagers", testUserManagersBind)
	t.Run("UserOptions", testUserOptionsBind)
}

func TestOne(t *testing.T) {
	t.Run("Admins", testAdminsOne)
	t.Run("Checkins", testCheckinsOne)
	t.Run("Coupons", testCouponsOne)
	t.Run("CouponAttachedUsers", testCouponAttachedUsersOne)
	t.Run("CouponNotices", testCouponNoticesOne)
	t.Run("CouponStores", testCouponStoresOne)
	t.Run("MailMagazines", testMailMagazinesOne)
	t.Run("StayableStoreInfos", testStayableStoreInfosOne)
	t.Run("Stores", testStoresOne)
	t.Run("UserData", testUserDataOne)
	t.Run("UserManagers", testUserManagersOne)
	t.Run("UserOptions", testUserOptionsOne)
}

func TestAll(t *testing.T) {
	t.Run("Admins", testAdminsAll)
	t.Run("Checkins", testCheckinsAll)
	t.Run("Coupons", testCouponsAll)
	t.Run("CouponAttachedUsers", testCouponAttachedUsersAll)
	t.Run("CouponNotices", testCouponNoticesAll)
	t.Run("CouponStores", testCouponStoresAll)
	t.Run("MailMagazines", testMailMagazinesAll)
	t.Run("StayableStoreInfos", testStayableStoreInfosAll)
	t.Run("Stores", testStoresAll)
	t.Run("UserData", testUserDataAll)
	t.Run("UserManagers", testUserManagersAll)
	t.Run("UserOptions", testUserOptionsAll)
}

func TestCount(t *testing.T) {
	t.Run("Admins", testAdminsCount)
	t.Run("Checkins", testCheckinsCount)
	t.Run("Coupons", testCouponsCount)
	t.Run("CouponAttachedUsers", testCouponAttachedUsersCount)
	t.Run("CouponNotices", testCouponNoticesCount)
	t.Run("CouponStores", testCouponStoresCount)
	t.Run("MailMagazines", testMailMagazinesCount)
	t.Run("StayableStoreInfos", testStayableStoreInfosCount)
	t.Run("Stores", testStoresCount)
	t.Run("UserData", testUserDataCount)
	t.Run("UserManagers", testUserManagersCount)
	t.Run("UserOptions", testUserOptionsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Admins", testAdminsHooks)
	t.Run("Checkins", testCheckinsHooks)
	t.Run("Coupons", testCouponsHooks)
	t.Run("CouponAttachedUsers", testCouponAttachedUsersHooks)
	t.Run("CouponNotices", testCouponNoticesHooks)
	t.Run("CouponStores", testCouponStoresHooks)
	t.Run("MailMagazines", testMailMagazinesHooks)
	t.Run("StayableStoreInfos", testStayableStoreInfosHooks)
	t.Run("Stores", testStoresHooks)
	t.Run("UserData", testUserDataHooks)
	t.Run("UserManagers", testUserManagersHooks)
	t.Run("UserOptions", testUserOptionsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Admins", testAdminsInsert)
	t.Run("Admins", testAdminsInsertWhitelist)
	t.Run("Checkins", testCheckinsInsert)
	t.Run("Checkins", testCheckinsInsertWhitelist)
	t.Run("Coupons", testCouponsInsert)
	t.Run("Coupons", testCouponsInsertWhitelist)
	t.Run("CouponAttachedUsers", testCouponAttachedUsersInsert)
	t.Run("CouponAttachedUsers", testCouponAttachedUsersInsertWhitelist)
	t.Run("CouponNotices", testCouponNoticesInsert)
	t.Run("CouponNotices", testCouponNoticesInsertWhitelist)
	t.Run("CouponStores", testCouponStoresInsert)
	t.Run("CouponStores", testCouponStoresInsertWhitelist)
	t.Run("MailMagazines", testMailMagazinesInsert)
	t.Run("MailMagazines", testMailMagazinesInsertWhitelist)
	t.Run("StayableStoreInfos", testStayableStoreInfosInsert)
	t.Run("StayableStoreInfos", testStayableStoreInfosInsertWhitelist)
	t.Run("Stores", testStoresInsert)
	t.Run("Stores", testStoresInsertWhitelist)
	t.Run("UserData", testUserDataInsert)
	t.Run("UserData", testUserDataInsertWhitelist)
	t.Run("UserManagers", testUserManagersInsert)
	t.Run("UserManagers", testUserManagersInsertWhitelist)
	t.Run("UserOptions", testUserOptionsInsert)
	t.Run("UserOptions", testUserOptionsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("AdminToUserManagerUsingAdmin", testAdminToOneUserManagerUsingAdmin)
	t.Run("AdminToStoreUsingBelongToStore", testAdminToOneStoreUsingBelongToStore)
	t.Run("CheckinToStoreUsingStore", testCheckinToOneStoreUsingStore)
	t.Run("CheckinToUserDatumUsingUser", testCheckinToOneUserDatumUsingUser)
	t.Run("CouponAttachedUserToCouponUsingCoupon", testCouponAttachedUserToOneCouponUsingCoupon)
	t.Run("CouponAttachedUserToUserDatumUsingUser", testCouponAttachedUserToOneUserDatumUsingUser)
	t.Run("CouponNoticeToCouponUsingCoupon", testCouponNoticeToOneCouponUsingCoupon)
	t.Run("CouponStoreToCouponUsingCoupon", testCouponStoreToOneCouponUsingCoupon)
	t.Run("CouponStoreToStoreUsingStore", testCouponStoreToOneStoreUsingStore)
	t.Run("MailMagazineToAdminUsingAuthorAdmin", testMailMagazineToOneAdminUsingAuthorAdmin)
	t.Run("StayableStoreInfoToStoreUsingStore", testStayableStoreInfoToOneStoreUsingStore)
	t.Run("UserDatumToUserManagerUsingUser", testUserDatumToOneUserManagerUsingUser)
	t.Run("UserOptionToUserDatumUsingUser", testUserOptionToOneUserDatumUsingUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {
	t.Run("CouponToCouponNoticeUsingCouponNotice", testCouponOneToOneCouponNoticeUsingCouponNotice)
	t.Run("CouponToCouponStoreUsingCouponStore", testCouponOneToOneCouponStoreUsingCouponStore)
	t.Run("StoreToStayableStoreInfoUsingStayableStoreInfo", testStoreOneToOneStayableStoreInfoUsingStayableStoreInfo)
	t.Run("UserDatumToUserOptionUsingUserUserOption", testUserDatumOneToOneUserOptionUsingUserUserOption)
	t.Run("UserManagerToAdminUsingAdminAdmin", testUserManagerOneToOneAdminUsingAdminAdmin)
	t.Run("UserManagerToUserDatumUsingUserUserDatum", testUserManagerOneToOneUserDatumUsingUserUserDatum)
}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("AdminToAuthorMailMagazines", testAdminToManyAuthorMailMagazines)
	t.Run("CouponToCouponAttachedUsers", testCouponToManyCouponAttachedUsers)
	t.Run("StoreToBelongToAdmins", testStoreToManyBelongToAdmins)
	t.Run("StoreToCheckins", testStoreToManyCheckins)
	t.Run("StoreToCouponStores", testStoreToManyCouponStores)
	t.Run("UserDatumToUserCheckins", testUserDatumToManyUserCheckins)
	t.Run("UserDatumToUserCouponAttachedUsers", testUserDatumToManyUserCouponAttachedUsers)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("AdminToUserManagerUsingAdminAdmin", testAdminToOneSetOpUserManagerUsingAdmin)
	t.Run("AdminToStoreUsingBelongToAdmins", testAdminToOneSetOpStoreUsingBelongToStore)
	t.Run("CheckinToStoreUsingCheckins", testCheckinToOneSetOpStoreUsingStore)
	t.Run("CheckinToUserDatumUsingUserCheckins", testCheckinToOneSetOpUserDatumUsingUser)
	t.Run("CouponAttachedUserToCouponUsingCouponAttachedUsers", testCouponAttachedUserToOneSetOpCouponUsingCoupon)
	t.Run("CouponAttachedUserToUserDatumUsingUserCouponAttachedUsers", testCouponAttachedUserToOneSetOpUserDatumUsingUser)
	t.Run("CouponNoticeToCouponUsingCouponNotice", testCouponNoticeToOneSetOpCouponUsingCoupon)
	t.Run("CouponStoreToCouponUsingCouponStore", testCouponStoreToOneSetOpCouponUsingCoupon)
	t.Run("CouponStoreToStoreUsingCouponStores", testCouponStoreToOneSetOpStoreUsingStore)
	t.Run("MailMagazineToAdminUsingAuthorMailMagazines", testMailMagazineToOneSetOpAdminUsingAuthorAdmin)
	t.Run("StayableStoreInfoToStoreUsingStayableStoreInfo", testStayableStoreInfoToOneSetOpStoreUsingStore)
	t.Run("UserDatumToUserManagerUsingUserUserDatum", testUserDatumToOneSetOpUserManagerUsingUser)
	t.Run("UserOptionToUserDatumUsingUserUserOption", testUserOptionToOneSetOpUserDatumUsingUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("CheckinToStoreUsingCheckins", testCheckinToOneRemoveOpStoreUsingStore)
	t.Run("CheckinToUserDatumUsingUserCheckins", testCheckinToOneRemoveOpUserDatumUsingUser)
	t.Run("MailMagazineToAdminUsingAuthorMailMagazines", testMailMagazineToOneRemoveOpAdminUsingAuthorAdmin)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {
	t.Run("CouponToCouponNoticeUsingCouponNotice", testCouponOneToOneSetOpCouponNoticeUsingCouponNotice)
	t.Run("CouponToCouponStoreUsingCouponStore", testCouponOneToOneSetOpCouponStoreUsingCouponStore)
	t.Run("StoreToStayableStoreInfoUsingStayableStoreInfo", testStoreOneToOneSetOpStayableStoreInfoUsingStayableStoreInfo)
	t.Run("UserDatumToUserOptionUsingUserUserOption", testUserDatumOneToOneSetOpUserOptionUsingUserUserOption)
	t.Run("UserManagerToAdminUsingAdminAdmin", testUserManagerOneToOneSetOpAdminUsingAdminAdmin)
	t.Run("UserManagerToUserDatumUsingUserUserDatum", testUserManagerOneToOneSetOpUserDatumUsingUserUserDatum)
}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("AdminToAuthorMailMagazines", testAdminToManyAddOpAuthorMailMagazines)
	t.Run("CouponToCouponAttachedUsers", testCouponToManyAddOpCouponAttachedUsers)
	t.Run("StoreToBelongToAdmins", testStoreToManyAddOpBelongToAdmins)
	t.Run("StoreToCheckins", testStoreToManyAddOpCheckins)
	t.Run("StoreToCouponStores", testStoreToManyAddOpCouponStores)
	t.Run("UserDatumToUserCheckins", testUserDatumToManyAddOpUserCheckins)
	t.Run("UserDatumToUserCouponAttachedUsers", testUserDatumToManyAddOpUserCouponAttachedUsers)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("AdminToAuthorMailMagazines", testAdminToManySetOpAuthorMailMagazines)
	t.Run("StoreToCheckins", testStoreToManySetOpCheckins)
	t.Run("UserDatumToUserCheckins", testUserDatumToManySetOpUserCheckins)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("AdminToAuthorMailMagazines", testAdminToManyRemoveOpAuthorMailMagazines)
	t.Run("StoreToCheckins", testStoreToManyRemoveOpCheckins)
	t.Run("UserDatumToUserCheckins", testUserDatumToManyRemoveOpUserCheckins)
}

func TestReload(t *testing.T) {
	t.Run("Admins", testAdminsReload)
	t.Run("Checkins", testCheckinsReload)
	t.Run("Coupons", testCouponsReload)
	t.Run("CouponAttachedUsers", testCouponAttachedUsersReload)
	t.Run("CouponNotices", testCouponNoticesReload)
	t.Run("CouponStores", testCouponStoresReload)
	t.Run("MailMagazines", testMailMagazinesReload)
	t.Run("StayableStoreInfos", testStayableStoreInfosReload)
	t.Run("Stores", testStoresReload)
	t.Run("UserData", testUserDataReload)
	t.Run("UserManagers", testUserManagersReload)
	t.Run("UserOptions", testUserOptionsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Admins", testAdminsReloadAll)
	t.Run("Checkins", testCheckinsReloadAll)
	t.Run("Coupons", testCouponsReloadAll)
	t.Run("CouponAttachedUsers", testCouponAttachedUsersReloadAll)
	t.Run("CouponNotices", testCouponNoticesReloadAll)
	t.Run("CouponStores", testCouponStoresReloadAll)
	t.Run("MailMagazines", testMailMagazinesReloadAll)
	t.Run("StayableStoreInfos", testStayableStoreInfosReloadAll)
	t.Run("Stores", testStoresReloadAll)
	t.Run("UserData", testUserDataReloadAll)
	t.Run("UserManagers", testUserManagersReloadAll)
	t.Run("UserOptions", testUserOptionsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Admins", testAdminsSelect)
	t.Run("Checkins", testCheckinsSelect)
	t.Run("Coupons", testCouponsSelect)
	t.Run("CouponAttachedUsers", testCouponAttachedUsersSelect)
	t.Run("CouponNotices", testCouponNoticesSelect)
	t.Run("CouponStores", testCouponStoresSelect)
	t.Run("MailMagazines", testMailMagazinesSelect)
	t.Run("StayableStoreInfos", testStayableStoreInfosSelect)
	t.Run("Stores", testStoresSelect)
	t.Run("UserData", testUserDataSelect)
	t.Run("UserManagers", testUserManagersSelect)
	t.Run("UserOptions", testUserOptionsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Admins", testAdminsUpdate)
	t.Run("Checkins", testCheckinsUpdate)
	t.Run("Coupons", testCouponsUpdate)
	t.Run("CouponAttachedUsers", testCouponAttachedUsersUpdate)
	t.Run("CouponNotices", testCouponNoticesUpdate)
	t.Run("CouponStores", testCouponStoresUpdate)
	t.Run("MailMagazines", testMailMagazinesUpdate)
	t.Run("StayableStoreInfos", testStayableStoreInfosUpdate)
	t.Run("Stores", testStoresUpdate)
	t.Run("UserData", testUserDataUpdate)
	t.Run("UserManagers", testUserManagersUpdate)
	t.Run("UserOptions", testUserOptionsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Admins", testAdminsSliceUpdateAll)
	t.Run("Checkins", testCheckinsSliceUpdateAll)
	t.Run("Coupons", testCouponsSliceUpdateAll)
	t.Run("CouponAttachedUsers", testCouponAttachedUsersSliceUpdateAll)
	t.Run("CouponNotices", testCouponNoticesSliceUpdateAll)
	t.Run("CouponStores", testCouponStoresSliceUpdateAll)
	t.Run("MailMagazines", testMailMagazinesSliceUpdateAll)
	t.Run("StayableStoreInfos", testStayableStoreInfosSliceUpdateAll)
	t.Run("Stores", testStoresSliceUpdateAll)
	t.Run("UserData", testUserDataSliceUpdateAll)
	t.Run("UserManagers", testUserManagersSliceUpdateAll)
	t.Run("UserOptions", testUserOptionsSliceUpdateAll)
}
