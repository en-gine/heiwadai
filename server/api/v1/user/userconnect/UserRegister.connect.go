// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/user/UserRegister.proto

package userconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	user "server/api/v1/user"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// UserRegisterControllerName is the fully-qualified name of the UserRegisterController service.
	UserRegisterControllerName = "server.user.UserRegisterController"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserRegisterControllerCallProcedure is the fully-qualified name of the UserRegisterController's
	// Call RPC.
	UserRegisterControllerCallProcedure = "/server.user.UserRegisterController/Call"
)

// UserRegisterControllerClient is a client for the server.user.UserRegisterController service.
type UserRegisterControllerClient interface {
	Call(context.Context, *connect_go.Request[user.UserRegisterRequest]) (*connect_go.Response[user.UserRegisterResponse], error)
}

// NewUserRegisterControllerClient constructs a client for the server.user.UserRegisterController
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserRegisterControllerClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) UserRegisterControllerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userRegisterControllerClient{
		call: connect_go.NewClient[user.UserRegisterRequest, user.UserRegisterResponse](
			httpClient,
			baseURL+UserRegisterControllerCallProcedure,
			opts...,
		),
	}
}

// userRegisterControllerClient implements UserRegisterControllerClient.
type userRegisterControllerClient struct {
	call *connect_go.Client[user.UserRegisterRequest, user.UserRegisterResponse]
}

// Call calls server.user.UserRegisterController.Call.
func (c *userRegisterControllerClient) Call(ctx context.Context, req *connect_go.Request[user.UserRegisterRequest]) (*connect_go.Response[user.UserRegisterResponse], error) {
	return c.call.CallUnary(ctx, req)
}

// UserRegisterControllerHandler is an implementation of the server.user.UserRegisterController
// service.
type UserRegisterControllerHandler interface {
	Call(context.Context, *connect_go.Request[user.UserRegisterRequest]) (*connect_go.Response[user.UserRegisterResponse], error)
}

// NewUserRegisterControllerHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserRegisterControllerHandler(svc UserRegisterControllerHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(UserRegisterControllerCallProcedure, connect_go.NewUnaryHandler(
		UserRegisterControllerCallProcedure,
		svc.Call,
		opts...,
	))
	return "/server.user.UserRegisterController/", mux
}

// UnimplementedUserRegisterControllerHandler returns CodeUnimplemented from all methods.
type UnimplementedUserRegisterControllerHandler struct{}

func (UnimplementedUserRegisterControllerHandler) Call(context.Context, *connect_go.Request[user.UserRegisterRequest]) (*connect_go.Response[user.UserRegisterResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.user.UserRegisterController.Call is not implemented"))
}
