// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Store is an object representing the database table.
type Store struct {
	ID              string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name            string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	BranchName      null.String `boil:"branch_name" json:"branch_name,omitempty" toml:"branch_name" yaml:"branch_name,omitempty"`
	ZipCode         string      `boil:"zip_code" json:"zip_code" toml:"zip_code" yaml:"zip_code"`
	Address         string      `boil:"address" json:"address" toml:"address" yaml:"address"`
	Tel             string      `boil:"tel" json:"tel" toml:"tel" yaml:"tel"`
	SiteURL         string      `boil:"site_url" json:"site_url" toml:"site_url" yaml:"site_url"`
	StampImageURL   string      `boil:"stamp_image_url" json:"stamp_image_url" toml:"stamp_image_url" yaml:"stamp_image_url"`
	Stayable        bool        `boil:"stayable" json:"stayable" toml:"stayable" yaml:"stayable"`
	IsActive        bool        `boil:"is_active" json:"is_active" toml:"is_active" yaml:"is_active"`
	QRCode          string      `boil:"qr_code" json:"qr_code" toml:"qr_code" yaml:"qr_code"`
	UnLimitedQRCode string      `boil:"un_limited_qr_code" json:"un_limited_qr_code" toml:"un_limited_qr_code" yaml:"un_limited_qr_code"`
	CreateAt        time.Time   `boil:"create_at" json:"create_at" toml:"create_at" yaml:"create_at"`
	UpdateAt        time.Time   `boil:"update_at" json:"update_at" toml:"update_at" yaml:"update_at"`

	R *storeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L storeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StoreColumns = struct {
	ID              string
	Name            string
	BranchName      string
	ZipCode         string
	Address         string
	Tel             string
	SiteURL         string
	StampImageURL   string
	Stayable        string
	IsActive        string
	QRCode          string
	UnLimitedQRCode string
	CreateAt        string
	UpdateAt        string
}{
	ID:              "id",
	Name:            "name",
	BranchName:      "branch_name",
	ZipCode:         "zip_code",
	Address:         "address",
	Tel:             "tel",
	SiteURL:         "site_url",
	StampImageURL:   "stamp_image_url",
	Stayable:        "stayable",
	IsActive:        "is_active",
	QRCode:          "qr_code",
	UnLimitedQRCode: "un_limited_qr_code",
	CreateAt:        "create_at",
	UpdateAt:        "update_at",
}

var StoreTableColumns = struct {
	ID              string
	Name            string
	BranchName      string
	ZipCode         string
	Address         string
	Tel             string
	SiteURL         string
	StampImageURL   string
	Stayable        string
	IsActive        string
	QRCode          string
	UnLimitedQRCode string
	CreateAt        string
	UpdateAt        string
}{
	ID:              "store.id",
	Name:            "store.name",
	BranchName:      "store.branch_name",
	ZipCode:         "store.zip_code",
	Address:         "store.address",
	Tel:             "store.tel",
	SiteURL:         "store.site_url",
	StampImageURL:   "store.stamp_image_url",
	Stayable:        "store.stayable",
	IsActive:        "store.is_active",
	QRCode:          "store.qr_code",
	UnLimitedQRCode: "store.un_limited_qr_code",
	CreateAt:        "store.create_at",
	UpdateAt:        "store.update_at",
}

// Generated where

var StoreWhere = struct {
	ID              whereHelperstring
	Name            whereHelperstring
	BranchName      whereHelpernull_String
	ZipCode         whereHelperstring
	Address         whereHelperstring
	Tel             whereHelperstring
	SiteURL         whereHelperstring
	StampImageURL   whereHelperstring
	Stayable        whereHelperbool
	IsActive        whereHelperbool
	QRCode          whereHelperstring
	UnLimitedQRCode whereHelperstring
	CreateAt        whereHelpertime_Time
	UpdateAt        whereHelpertime_Time
}{
	ID:              whereHelperstring{field: "\"store\".\"id\""},
	Name:            whereHelperstring{field: "\"store\".\"name\""},
	BranchName:      whereHelpernull_String{field: "\"store\".\"branch_name\""},
	ZipCode:         whereHelperstring{field: "\"store\".\"zip_code\""},
	Address:         whereHelperstring{field: "\"store\".\"address\""},
	Tel:             whereHelperstring{field: "\"store\".\"tel\""},
	SiteURL:         whereHelperstring{field: "\"store\".\"site_url\""},
	StampImageURL:   whereHelperstring{field: "\"store\".\"stamp_image_url\""},
	Stayable:        whereHelperbool{field: "\"store\".\"stayable\""},
	IsActive:        whereHelperbool{field: "\"store\".\"is_active\""},
	QRCode:          whereHelperstring{field: "\"store\".\"qr_code\""},
	UnLimitedQRCode: whereHelperstring{field: "\"store\".\"un_limited_qr_code\""},
	CreateAt:        whereHelpertime_Time{field: "\"store\".\"create_at\""},
	UpdateAt:        whereHelpertime_Time{field: "\"store\".\"update_at\""},
}

// StoreRels is where relationship names are stored.
var StoreRels = struct {
	StayableStoreInfo string
	BelongToAdmins    string
	BookPlans         string
	Checkins          string
	CouponStores      string
}{
	StayableStoreInfo: "StayableStoreInfo",
	BelongToAdmins:    "BelongToAdmins",
	BookPlans:         "BookPlans",
	Checkins:          "Checkins",
	CouponStores:      "CouponStores",
}

// storeR is where relationships are stored.
type storeR struct {
	StayableStoreInfo *StayableStoreInfo `boil:"StayableStoreInfo" json:"StayableStoreInfo" toml:"StayableStoreInfo" yaml:"StayableStoreInfo"`
	BelongToAdmins    AdminSlice         `boil:"BelongToAdmins" json:"BelongToAdmins" toml:"BelongToAdmins" yaml:"BelongToAdmins"`
	BookPlans         BookPlanSlice      `boil:"BookPlans" json:"BookPlans" toml:"BookPlans" yaml:"BookPlans"`
	Checkins          CheckinSlice       `boil:"Checkins" json:"Checkins" toml:"Checkins" yaml:"Checkins"`
	CouponStores      CouponStoreSlice   `boil:"CouponStores" json:"CouponStores" toml:"CouponStores" yaml:"CouponStores"`
}

// NewStruct creates a new relationship struct
func (*storeR) NewStruct() *storeR {
	return &storeR{}
}

func (r *storeR) GetStayableStoreInfo() *StayableStoreInfo {
	if r == nil {
		return nil
	}
	return r.StayableStoreInfo
}

func (r *storeR) GetBelongToAdmins() AdminSlice {
	if r == nil {
		return nil
	}
	return r.BelongToAdmins
}

func (r *storeR) GetBookPlans() BookPlanSlice {
	if r == nil {
		return nil
	}
	return r.BookPlans
}

func (r *storeR) GetCheckins() CheckinSlice {
	if r == nil {
		return nil
	}
	return r.Checkins
}

func (r *storeR) GetCouponStores() CouponStoreSlice {
	if r == nil {
		return nil
	}
	return r.CouponStores
}

// storeL is where Load methods for each relationship are stored.
type storeL struct{}

var (
	storeAllColumns            = []string{"id", "name", "branch_name", "zip_code", "address", "tel", "site_url", "stamp_image_url", "stayable", "is_active", "qr_code", "un_limited_qr_code", "create_at", "update_at"}
	storeColumnsWithoutDefault = []string{"id", "name", "zip_code", "address", "tel", "site_url", "stamp_image_url", "stayable", "is_active", "qr_code", "un_limited_qr_code"}
	storeColumnsWithDefault    = []string{"branch_name", "create_at", "update_at"}
	storePrimaryKeyColumns     = []string{"id"}
	storeGeneratedColumns      = []string{}
)

type (
	// StoreSlice is an alias for a slice of pointers to Store.
	// This should almost always be used instead of []Store.
	StoreSlice []*Store
	// StoreHook is the signature for custom Store hook methods
	StoreHook func(context.Context, boil.ContextExecutor, *Store) error

	storeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	storeType                 = reflect.TypeOf(&Store{})
	storeMapping              = queries.MakeStructMapping(storeType)
	storePrimaryKeyMapping, _ = queries.BindMapping(storeType, storeMapping, storePrimaryKeyColumns)
	storeInsertCacheMut       sync.RWMutex
	storeInsertCache          = make(map[string]insertCache)
	storeUpdateCacheMut       sync.RWMutex
	storeUpdateCache          = make(map[string]updateCache)
	storeUpsertCacheMut       sync.RWMutex
	storeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var storeAfterSelectHooks []StoreHook

var storeBeforeInsertHooks []StoreHook
var storeAfterInsertHooks []StoreHook

var storeBeforeUpdateHooks []StoreHook
var storeAfterUpdateHooks []StoreHook

var storeBeforeDeleteHooks []StoreHook
var storeAfterDeleteHooks []StoreHook

var storeBeforeUpsertHooks []StoreHook
var storeAfterUpsertHooks []StoreHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Store) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Store) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Store) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Store) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Store) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Store) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Store) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Store) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Store) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStoreHook registers your hook function for all future operations.
func AddStoreHook(hookPoint boil.HookPoint, storeHook StoreHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		storeAfterSelectHooks = append(storeAfterSelectHooks, storeHook)
	case boil.BeforeInsertHook:
		storeBeforeInsertHooks = append(storeBeforeInsertHooks, storeHook)
	case boil.AfterInsertHook:
		storeAfterInsertHooks = append(storeAfterInsertHooks, storeHook)
	case boil.BeforeUpdateHook:
		storeBeforeUpdateHooks = append(storeBeforeUpdateHooks, storeHook)
	case boil.AfterUpdateHook:
		storeAfterUpdateHooks = append(storeAfterUpdateHooks, storeHook)
	case boil.BeforeDeleteHook:
		storeBeforeDeleteHooks = append(storeBeforeDeleteHooks, storeHook)
	case boil.AfterDeleteHook:
		storeAfterDeleteHooks = append(storeAfterDeleteHooks, storeHook)
	case boil.BeforeUpsertHook:
		storeBeforeUpsertHooks = append(storeBeforeUpsertHooks, storeHook)
	case boil.AfterUpsertHook:
		storeAfterUpsertHooks = append(storeAfterUpsertHooks, storeHook)
	}
}

// One returns a single store record from the query.
func (q storeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Store, error) {
	o := &Store{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for store")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Store records from the query.
func (q storeQuery) All(ctx context.Context, exec boil.ContextExecutor) (StoreSlice, error) {
	var o []*Store

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Store slice")
	}

	if len(storeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Store records in the query.
func (q storeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count store rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q storeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if store exists")
	}

	return count > 0, nil
}

// StayableStoreInfo pointed to by the foreign key.
func (o *Store) StayableStoreInfo(mods ...qm.QueryMod) stayableStoreInfoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"store_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return StayableStoreInfos(queryMods...)
}

// BelongToAdmins retrieves all the admin's Admins with an executor via belong_to column.
func (o *Store) BelongToAdmins(mods ...qm.QueryMod) adminQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"admin\".\"belong_to\"=?", o.ID),
	)

	return Admins(queryMods...)
}

// BookPlans retrieves all the book_plan's BookPlans with an executor.
func (o *Store) BookPlans(mods ...qm.QueryMod) bookPlanQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"book_plan\".\"store_id\"=?", o.ID),
	)

	return BookPlans(queryMods...)
}

// Checkins retrieves all the checkin's Checkins with an executor.
func (o *Store) Checkins(mods ...qm.QueryMod) checkinQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"checkin\".\"store_id\"=?", o.ID),
	)

	return Checkins(queryMods...)
}

// CouponStores retrieves all the coupon_store's CouponStores with an executor.
func (o *Store) CouponStores(mods ...qm.QueryMod) couponStoreQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"coupon_stores\".\"store_id\"=?", o.ID),
	)

	return CouponStores(queryMods...)
}

// LoadStayableStoreInfo allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (storeL) LoadStayableStoreInfo(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStore interface{}, mods queries.Applicator) error {
	var slice []*Store
	var object *Store

	if singular {
		var ok bool
		object, ok = maybeStore.(*Store)
		if !ok {
			object = new(Store)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStore)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStore))
			}
		}
	} else {
		s, ok := maybeStore.(*[]*Store)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStore)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStore))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &storeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &storeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`stayable_store_info`),
		qm.WhereIn(`stayable_store_info.store_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load StayableStoreInfo")
	}

	var resultSlice []*StayableStoreInfo
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice StayableStoreInfo")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for stayable_store_info")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for stayable_store_info")
	}

	if len(stayableStoreInfoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.StayableStoreInfo = foreign
		if foreign.R == nil {
			foreign.R = &stayableStoreInfoR{}
		}
		foreign.R.Store = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.StoreID {
				local.R.StayableStoreInfo = foreign
				if foreign.R == nil {
					foreign.R = &stayableStoreInfoR{}
				}
				foreign.R.Store = local
				break
			}
		}
	}

	return nil
}

// LoadBelongToAdmins allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (storeL) LoadBelongToAdmins(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStore interface{}, mods queries.Applicator) error {
	var slice []*Store
	var object *Store

	if singular {
		var ok bool
		object, ok = maybeStore.(*Store)
		if !ok {
			object = new(Store)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStore)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStore))
			}
		}
	} else {
		s, ok := maybeStore.(*[]*Store)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStore)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStore))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &storeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &storeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`admin`),
		qm.WhereIn(`admin.belong_to in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load admin")
	}

	var resultSlice []*Admin
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice admin")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on admin")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for admin")
	}

	if len(adminAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BelongToAdmins = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &adminR{}
			}
			foreign.R.BelongToStore = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BelongTo {
				local.R.BelongToAdmins = append(local.R.BelongToAdmins, foreign)
				if foreign.R == nil {
					foreign.R = &adminR{}
				}
				foreign.R.BelongToStore = local
				break
			}
		}
	}

	return nil
}

// LoadBookPlans allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (storeL) LoadBookPlans(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStore interface{}, mods queries.Applicator) error {
	var slice []*Store
	var object *Store

	if singular {
		var ok bool
		object, ok = maybeStore.(*Store)
		if !ok {
			object = new(Store)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStore)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStore))
			}
		}
	} else {
		s, ok := maybeStore.(*[]*Store)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStore)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStore))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &storeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &storeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`book_plan`),
		qm.WhereIn(`book_plan.store_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load book_plan")
	}

	var resultSlice []*BookPlan
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice book_plan")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on book_plan")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for book_plan")
	}

	if len(bookPlanAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BookPlans = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &bookPlanR{}
			}
			foreign.R.Store = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.StoreID {
				local.R.BookPlans = append(local.R.BookPlans, foreign)
				if foreign.R == nil {
					foreign.R = &bookPlanR{}
				}
				foreign.R.Store = local
				break
			}
		}
	}

	return nil
}

// LoadCheckins allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (storeL) LoadCheckins(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStore interface{}, mods queries.Applicator) error {
	var slice []*Store
	var object *Store

	if singular {
		var ok bool
		object, ok = maybeStore.(*Store)
		if !ok {
			object = new(Store)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStore)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStore))
			}
		}
	} else {
		s, ok := maybeStore.(*[]*Store)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStore)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStore))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &storeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &storeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`checkin`),
		qm.WhereIn(`checkin.store_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load checkin")
	}

	var resultSlice []*Checkin
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice checkin")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on checkin")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for checkin")
	}

	if len(checkinAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Checkins = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &checkinR{}
			}
			foreign.R.Store = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.StoreID) {
				local.R.Checkins = append(local.R.Checkins, foreign)
				if foreign.R == nil {
					foreign.R = &checkinR{}
				}
				foreign.R.Store = local
				break
			}
		}
	}

	return nil
}

// LoadCouponStores allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (storeL) LoadCouponStores(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStore interface{}, mods queries.Applicator) error {
	var slice []*Store
	var object *Store

	if singular {
		var ok bool
		object, ok = maybeStore.(*Store)
		if !ok {
			object = new(Store)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStore)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStore))
			}
		}
	} else {
		s, ok := maybeStore.(*[]*Store)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStore)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStore))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &storeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &storeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`coupon_stores`),
		qm.WhereIn(`coupon_stores.store_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load coupon_stores")
	}

	var resultSlice []*CouponStore
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice coupon_stores")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on coupon_stores")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for coupon_stores")
	}

	if len(couponStoreAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CouponStores = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &couponStoreR{}
			}
			foreign.R.Store = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.StoreID {
				local.R.CouponStores = append(local.R.CouponStores, foreign)
				if foreign.R == nil {
					foreign.R = &couponStoreR{}
				}
				foreign.R.Store = local
				break
			}
		}
	}

	return nil
}

// SetStayableStoreInfo of the store to the related item.
// Sets o.R.StayableStoreInfo to related.
// Adds o to related.R.Store.
func (o *Store) SetStayableStoreInfo(ctx context.Context, exec boil.ContextExecutor, insert bool, related *StayableStoreInfo) error {
	var err error

	if insert {
		related.StoreID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"stayable_store_info\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"store_id"}),
			strmangle.WhereClause("\"", "\"", 2, stayableStoreInfoPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.StoreID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.StoreID = o.ID
	}

	if o.R == nil {
		o.R = &storeR{
			StayableStoreInfo: related,
		}
	} else {
		o.R.StayableStoreInfo = related
	}

	if related.R == nil {
		related.R = &stayableStoreInfoR{
			Store: o,
		}
	} else {
		related.R.Store = o
	}
	return nil
}

// AddBelongToAdmins adds the given related objects to the existing relationships
// of the store, optionally inserting them as new records.
// Appends related to o.R.BelongToAdmins.
// Sets related.R.BelongToStore appropriately.
func (o *Store) AddBelongToAdmins(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Admin) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BelongTo = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"admin\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"belong_to"}),
				strmangle.WhereClause("\"", "\"", 2, adminPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.AdminID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BelongTo = o.ID
		}
	}

	if o.R == nil {
		o.R = &storeR{
			BelongToAdmins: related,
		}
	} else {
		o.R.BelongToAdmins = append(o.R.BelongToAdmins, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &adminR{
				BelongToStore: o,
			}
		} else {
			rel.R.BelongToStore = o
		}
	}
	return nil
}

// AddBookPlans adds the given related objects to the existing relationships
// of the store, optionally inserting them as new records.
// Appends related to o.R.BookPlans.
// Sets related.R.Store appropriately.
func (o *Store) AddBookPlans(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BookPlan) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StoreID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"book_plan\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"store_id"}),
				strmangle.WhereClause("\"", "\"", 2, bookPlanPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StoreID = o.ID
		}
	}

	if o.R == nil {
		o.R = &storeR{
			BookPlans: related,
		}
	} else {
		o.R.BookPlans = append(o.R.BookPlans, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &bookPlanR{
				Store: o,
			}
		} else {
			rel.R.Store = o
		}
	}
	return nil
}

// AddCheckins adds the given related objects to the existing relationships
// of the store, optionally inserting them as new records.
// Appends related to o.R.Checkins.
// Sets related.R.Store appropriately.
func (o *Store) AddCheckins(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Checkin) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.StoreID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"checkin\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"store_id"}),
				strmangle.WhereClause("\"", "\"", 2, checkinPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.StoreID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &storeR{
			Checkins: related,
		}
	} else {
		o.R.Checkins = append(o.R.Checkins, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &checkinR{
				Store: o,
			}
		} else {
			rel.R.Store = o
		}
	}
	return nil
}

// SetCheckins removes all previously related items of the
// store replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Store's Checkins accordingly.
// Replaces o.R.Checkins with related.
// Sets related.R.Store's Checkins accordingly.
func (o *Store) SetCheckins(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Checkin) error {
	query := "update \"checkin\" set \"store_id\" = null where \"store_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Checkins {
			queries.SetScanner(&rel.StoreID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Store = nil
		}
		o.R.Checkins = nil
	}

	return o.AddCheckins(ctx, exec, insert, related...)
}

// RemoveCheckins relationships from objects passed in.
// Removes related items from R.Checkins (uses pointer comparison, removal does not keep order)
// Sets related.R.Store.
func (o *Store) RemoveCheckins(ctx context.Context, exec boil.ContextExecutor, related ...*Checkin) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.StoreID, nil)
		if rel.R != nil {
			rel.R.Store = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("store_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Checkins {
			if rel != ri {
				continue
			}

			ln := len(o.R.Checkins)
			if ln > 1 && i < ln-1 {
				o.R.Checkins[i] = o.R.Checkins[ln-1]
			}
			o.R.Checkins = o.R.Checkins[:ln-1]
			break
		}
	}

	return nil
}

// AddCouponStores adds the given related objects to the existing relationships
// of the store, optionally inserting them as new records.
// Appends related to o.R.CouponStores.
// Sets related.R.Store appropriately.
func (o *Store) AddCouponStores(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CouponStore) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StoreID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"coupon_stores\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"store_id"}),
				strmangle.WhereClause("\"", "\"", 2, couponStorePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.CouponID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StoreID = o.ID
		}
	}

	if o.R == nil {
		o.R = &storeR{
			CouponStores: related,
		}
	} else {
		o.R.CouponStores = append(o.R.CouponStores, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &couponStoreR{
				Store: o,
			}
		} else {
			rel.R.Store = o
		}
	}
	return nil
}

// Stores retrieves all the records using an executor.
func Stores(mods ...qm.QueryMod) storeQuery {
	mods = append(mods, qm.From("\"store\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"store\".*"})
	}

	return storeQuery{q}
}

// FindStore retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStore(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Store, error) {
	storeObj := &Store{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"store\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, storeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from store")
	}

	if err = storeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return storeObj, err
	}

	return storeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Store) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no store provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreateAt.IsZero() {
			o.CreateAt = currTime
		}
		if o.UpdateAt.IsZero() {
			o.UpdateAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(storeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	storeInsertCacheMut.RLock()
	cache, cached := storeInsertCache[key]
	storeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			storeAllColumns,
			storeColumnsWithDefault,
			storeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(storeType, storeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(storeType, storeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"store\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"store\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into store")
	}

	if !cached {
		storeInsertCacheMut.Lock()
		storeInsertCache[key] = cache
		storeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Store.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Store) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdateAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	storeUpdateCacheMut.RLock()
	cache, cached := storeUpdateCache[key]
	storeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			storeAllColumns,
			storePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update store, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"store\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, storePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(storeType, storeMapping, append(wl, storePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update store row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for store")
	}

	if !cached {
		storeUpdateCacheMut.Lock()
		storeUpdateCache[key] = cache
		storeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q storeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for store")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for store")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StoreSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"store\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, storePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in store slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all store")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Store) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no store provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreateAt.IsZero() {
			o.CreateAt = currTime
		}
		o.UpdateAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(storeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	storeUpsertCacheMut.RLock()
	cache, cached := storeUpsertCache[key]
	storeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			storeAllColumns,
			storeColumnsWithDefault,
			storeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			storeAllColumns,
			storePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert store, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(storePrimaryKeyColumns))
			copy(conflict, storePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"store\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(storeType, storeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(storeType, storeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert store")
	}

	if !cached {
		storeUpsertCacheMut.Lock()
		storeUpsertCache[key] = cache
		storeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Store record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Store) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Store provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), storePrimaryKeyMapping)
	sql := "DELETE FROM \"store\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from store")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for store")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q storeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no storeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from store")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for store")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StoreSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(storeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"store\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, storePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from store slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for store")
	}

	if len(storeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Store) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStore(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StoreSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StoreSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"store\".* FROM \"store\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, storePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StoreSlice")
	}

	*o = slice

	return nil
}

// StoreExists checks if the Store row exists.
func StoreExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"store\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if store exists")
	}

	return exists, nil
}

// Exists checks if the Store row exists.
func (o *Store) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return StoreExists(ctx, exec, o.ID)
}
