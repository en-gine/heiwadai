// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CouponStore is an object representing the database table.
type CouponStore struct {
	CouponID string `boil:"coupon_id" json:"coupon_id" toml:"coupon_id" yaml:"coupon_id"`
	StoreID  string `boil:"store_id" json:"store_id" toml:"store_id" yaml:"store_id"`

	R *couponStoreR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L couponStoreL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CouponStoreColumns = struct {
	CouponID string
	StoreID  string
}{
	CouponID: "coupon_id",
	StoreID:  "store_id",
}

var CouponStoreTableColumns = struct {
	CouponID string
	StoreID  string
}{
	CouponID: "coupon_stores.coupon_id",
	StoreID:  "coupon_stores.store_id",
}

// Generated where

var CouponStoreWhere = struct {
	CouponID whereHelperstring
	StoreID  whereHelperstring
}{
	CouponID: whereHelperstring{field: "\"coupon_stores\".\"coupon_id\""},
	StoreID:  whereHelperstring{field: "\"coupon_stores\".\"store_id\""},
}

// CouponStoreRels is where relationship names are stored.
var CouponStoreRels = struct {
	Coupon string
	Store  string
}{
	Coupon: "Coupon",
	Store:  "Store",
}

// couponStoreR is where relationships are stored.
type couponStoreR struct {
	Coupon *Coupon `boil:"Coupon" json:"Coupon" toml:"Coupon" yaml:"Coupon"`
	Store  *Store  `boil:"Store" json:"Store" toml:"Store" yaml:"Store"`
}

// NewStruct creates a new relationship struct
func (*couponStoreR) NewStruct() *couponStoreR {
	return &couponStoreR{}
}

func (r *couponStoreR) GetCoupon() *Coupon {
	if r == nil {
		return nil
	}
	return r.Coupon
}

func (r *couponStoreR) GetStore() *Store {
	if r == nil {
		return nil
	}
	return r.Store
}

// couponStoreL is where Load methods for each relationship are stored.
type couponStoreL struct{}

var (
	couponStoreAllColumns            = []string{"coupon_id", "store_id"}
	couponStoreColumnsWithoutDefault = []string{"coupon_id", "store_id"}
	couponStoreColumnsWithDefault    = []string{}
	couponStorePrimaryKeyColumns     = []string{"coupon_id"}
	couponStoreGeneratedColumns      = []string{}
)

type (
	// CouponStoreSlice is an alias for a slice of pointers to CouponStore.
	// This should almost always be used instead of []CouponStore.
	CouponStoreSlice []*CouponStore
	// CouponStoreHook is the signature for custom CouponStore hook methods
	CouponStoreHook func(context.Context, boil.ContextExecutor, *CouponStore) error

	couponStoreQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	couponStoreType                 = reflect.TypeOf(&CouponStore{})
	couponStoreMapping              = queries.MakeStructMapping(couponStoreType)
	couponStorePrimaryKeyMapping, _ = queries.BindMapping(couponStoreType, couponStoreMapping, couponStorePrimaryKeyColumns)
	couponStoreInsertCacheMut       sync.RWMutex
	couponStoreInsertCache          = make(map[string]insertCache)
	couponStoreUpdateCacheMut       sync.RWMutex
	couponStoreUpdateCache          = make(map[string]updateCache)
	couponStoreUpsertCacheMut       sync.RWMutex
	couponStoreUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var couponStoreAfterSelectHooks []CouponStoreHook

var couponStoreBeforeInsertHooks []CouponStoreHook
var couponStoreAfterInsertHooks []CouponStoreHook

var couponStoreBeforeUpdateHooks []CouponStoreHook
var couponStoreAfterUpdateHooks []CouponStoreHook

var couponStoreBeforeDeleteHooks []CouponStoreHook
var couponStoreAfterDeleteHooks []CouponStoreHook

var couponStoreBeforeUpsertHooks []CouponStoreHook
var couponStoreAfterUpsertHooks []CouponStoreHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CouponStore) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range couponStoreAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CouponStore) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range couponStoreBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CouponStore) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range couponStoreAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CouponStore) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range couponStoreBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CouponStore) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range couponStoreAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CouponStore) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range couponStoreBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CouponStore) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range couponStoreAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CouponStore) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range couponStoreBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CouponStore) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range couponStoreAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCouponStoreHook registers your hook function for all future operations.
func AddCouponStoreHook(hookPoint boil.HookPoint, couponStoreHook CouponStoreHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		couponStoreAfterSelectHooks = append(couponStoreAfterSelectHooks, couponStoreHook)
	case boil.BeforeInsertHook:
		couponStoreBeforeInsertHooks = append(couponStoreBeforeInsertHooks, couponStoreHook)
	case boil.AfterInsertHook:
		couponStoreAfterInsertHooks = append(couponStoreAfterInsertHooks, couponStoreHook)
	case boil.BeforeUpdateHook:
		couponStoreBeforeUpdateHooks = append(couponStoreBeforeUpdateHooks, couponStoreHook)
	case boil.AfterUpdateHook:
		couponStoreAfterUpdateHooks = append(couponStoreAfterUpdateHooks, couponStoreHook)
	case boil.BeforeDeleteHook:
		couponStoreBeforeDeleteHooks = append(couponStoreBeforeDeleteHooks, couponStoreHook)
	case boil.AfterDeleteHook:
		couponStoreAfterDeleteHooks = append(couponStoreAfterDeleteHooks, couponStoreHook)
	case boil.BeforeUpsertHook:
		couponStoreBeforeUpsertHooks = append(couponStoreBeforeUpsertHooks, couponStoreHook)
	case boil.AfterUpsertHook:
		couponStoreAfterUpsertHooks = append(couponStoreAfterUpsertHooks, couponStoreHook)
	}
}

// One returns a single couponStore record from the query.
func (q couponStoreQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CouponStore, error) {
	o := &CouponStore{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for coupon_stores")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CouponStore records from the query.
func (q couponStoreQuery) All(ctx context.Context, exec boil.ContextExecutor) (CouponStoreSlice, error) {
	var o []*CouponStore

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CouponStore slice")
	}

	if len(couponStoreAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CouponStore records in the query.
func (q couponStoreQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count coupon_stores rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q couponStoreQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if coupon_stores exists")
	}

	return count > 0, nil
}

// Coupon pointed to by the foreign key.
func (o *CouponStore) Coupon(mods ...qm.QueryMod) couponQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CouponID),
	}

	queryMods = append(queryMods, mods...)

	return Coupons(queryMods...)
}

// Store pointed to by the foreign key.
func (o *CouponStore) Store(mods ...qm.QueryMod) storeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.StoreID),
	}

	queryMods = append(queryMods, mods...)

	return Stores(queryMods...)
}

// LoadCoupon allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (couponStoreL) LoadCoupon(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCouponStore interface{}, mods queries.Applicator) error {
	var slice []*CouponStore
	var object *CouponStore

	if singular {
		var ok bool
		object, ok = maybeCouponStore.(*CouponStore)
		if !ok {
			object = new(CouponStore)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCouponStore)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCouponStore))
			}
		}
	} else {
		s, ok := maybeCouponStore.(*[]*CouponStore)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCouponStore)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCouponStore))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &couponStoreR{}
		}
		args = append(args, object.CouponID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &couponStoreR{}
			}

			for _, a := range args {
				if a == obj.CouponID {
					continue Outer
				}
			}

			args = append(args, obj.CouponID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`coupon`),
		qm.WhereIn(`coupon.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Coupon")
	}

	var resultSlice []*Coupon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Coupon")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for coupon")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for coupon")
	}

	if len(couponAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Coupon = foreign
		if foreign.R == nil {
			foreign.R = &couponR{}
		}
		foreign.R.CouponStore = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CouponID == foreign.ID {
				local.R.Coupon = foreign
				if foreign.R == nil {
					foreign.R = &couponR{}
				}
				foreign.R.CouponStore = local
				break
			}
		}
	}

	return nil
}

// LoadStore allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (couponStoreL) LoadStore(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCouponStore interface{}, mods queries.Applicator) error {
	var slice []*CouponStore
	var object *CouponStore

	if singular {
		var ok bool
		object, ok = maybeCouponStore.(*CouponStore)
		if !ok {
			object = new(CouponStore)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCouponStore)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCouponStore))
			}
		}
	} else {
		s, ok := maybeCouponStore.(*[]*CouponStore)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCouponStore)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCouponStore))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &couponStoreR{}
		}
		args = append(args, object.StoreID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &couponStoreR{}
			}

			for _, a := range args {
				if a == obj.StoreID {
					continue Outer
				}
			}

			args = append(args, obj.StoreID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`store`),
		qm.WhereIn(`store.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Store")
	}

	var resultSlice []*Store
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Store")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for store")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for store")
	}

	if len(storeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Store = foreign
		if foreign.R == nil {
			foreign.R = &storeR{}
		}
		foreign.R.CouponStores = append(foreign.R.CouponStores, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StoreID == foreign.ID {
				local.R.Store = foreign
				if foreign.R == nil {
					foreign.R = &storeR{}
				}
				foreign.R.CouponStores = append(foreign.R.CouponStores, local)
				break
			}
		}
	}

	return nil
}

// SetCoupon of the couponStore to the related item.
// Sets o.R.Coupon to related.
// Adds o to related.R.CouponStore.
func (o *CouponStore) SetCoupon(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Coupon) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"coupon_stores\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"coupon_id"}),
		strmangle.WhereClause("\"", "\"", 2, couponStorePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.CouponID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CouponID = related.ID
	if o.R == nil {
		o.R = &couponStoreR{
			Coupon: related,
		}
	} else {
		o.R.Coupon = related
	}

	if related.R == nil {
		related.R = &couponR{
			CouponStore: o,
		}
	} else {
		related.R.CouponStore = o
	}

	return nil
}

// SetStore of the couponStore to the related item.
// Sets o.R.Store to related.
// Adds o to related.R.CouponStores.
func (o *CouponStore) SetStore(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Store) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"coupon_stores\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"store_id"}),
		strmangle.WhereClause("\"", "\"", 2, couponStorePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.CouponID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StoreID = related.ID
	if o.R == nil {
		o.R = &couponStoreR{
			Store: related,
		}
	} else {
		o.R.Store = related
	}

	if related.R == nil {
		related.R = &storeR{
			CouponStores: CouponStoreSlice{o},
		}
	} else {
		related.R.CouponStores = append(related.R.CouponStores, o)
	}

	return nil
}

// CouponStores retrieves all the records using an executor.
func CouponStores(mods ...qm.QueryMod) couponStoreQuery {
	mods = append(mods, qm.From("\"coupon_stores\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"coupon_stores\".*"})
	}

	return couponStoreQuery{q}
}

// FindCouponStore retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCouponStore(ctx context.Context, exec boil.ContextExecutor, couponID string, selectCols ...string) (*CouponStore, error) {
	couponStoreObj := &CouponStore{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"coupon_stores\" where \"coupon_id\"=$1", sel,
	)

	q := queries.Raw(query, couponID)

	err := q.Bind(ctx, exec, couponStoreObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from coupon_stores")
	}

	if err = couponStoreObj.doAfterSelectHooks(ctx, exec); err != nil {
		return couponStoreObj, err
	}

	return couponStoreObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CouponStore) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no coupon_stores provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(couponStoreColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	couponStoreInsertCacheMut.RLock()
	cache, cached := couponStoreInsertCache[key]
	couponStoreInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			couponStoreAllColumns,
			couponStoreColumnsWithDefault,
			couponStoreColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(couponStoreType, couponStoreMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(couponStoreType, couponStoreMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"coupon_stores\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"coupon_stores\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into coupon_stores")
	}

	if !cached {
		couponStoreInsertCacheMut.Lock()
		couponStoreInsertCache[key] = cache
		couponStoreInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CouponStore.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CouponStore) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	couponStoreUpdateCacheMut.RLock()
	cache, cached := couponStoreUpdateCache[key]
	couponStoreUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			couponStoreAllColumns,
			couponStorePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update coupon_stores, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"coupon_stores\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, couponStorePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(couponStoreType, couponStoreMapping, append(wl, couponStorePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update coupon_stores row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for coupon_stores")
	}

	if !cached {
		couponStoreUpdateCacheMut.Lock()
		couponStoreUpdateCache[key] = cache
		couponStoreUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q couponStoreQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for coupon_stores")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for coupon_stores")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CouponStoreSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), couponStorePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"coupon_stores\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, couponStorePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in couponStore slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all couponStore")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CouponStore) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no coupon_stores provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(couponStoreColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	couponStoreUpsertCacheMut.RLock()
	cache, cached := couponStoreUpsertCache[key]
	couponStoreUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			couponStoreAllColumns,
			couponStoreColumnsWithDefault,
			couponStoreColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			couponStoreAllColumns,
			couponStorePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert coupon_stores, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(couponStorePrimaryKeyColumns))
			copy(conflict, couponStorePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"coupon_stores\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(couponStoreType, couponStoreMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(couponStoreType, couponStoreMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert coupon_stores")
	}

	if !cached {
		couponStoreUpsertCacheMut.Lock()
		couponStoreUpsertCache[key] = cache
		couponStoreUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CouponStore record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CouponStore) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CouponStore provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), couponStorePrimaryKeyMapping)
	sql := "DELETE FROM \"coupon_stores\" WHERE \"coupon_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from coupon_stores")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for coupon_stores")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q couponStoreQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no couponStoreQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from coupon_stores")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for coupon_stores")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CouponStoreSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(couponStoreBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), couponStorePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"coupon_stores\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, couponStorePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from couponStore slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for coupon_stores")
	}

	if len(couponStoreAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CouponStore) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCouponStore(ctx, exec, o.CouponID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CouponStoreSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CouponStoreSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), couponStorePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"coupon_stores\".* FROM \"coupon_stores\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, couponStorePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CouponStoreSlice")
	}

	*o = slice

	return nil
}

// CouponStoreExists checks if the CouponStore row exists.
func CouponStoreExists(ctx context.Context, exec boil.ContextExecutor, couponID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"coupon_stores\" where \"coupon_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, couponID)
	}
	row := exec.QueryRowContext(ctx, sql, couponID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if coupon_stores exists")
	}

	return exists, nil
}

// Exists checks if the CouponStore row exists.
func (o *CouponStore) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CouponStoreExists(ctx, exec, o.CouponID)
}
