// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCouponStores(t *testing.T) {
	t.Parallel()

	query := CouponStores()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCouponStoresDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CouponStore{}
	if err = randomize.Struct(seed, o, couponStoreDBTypes, true, couponStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CouponStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CouponStores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCouponStoresQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CouponStore{}
	if err = randomize.Struct(seed, o, couponStoreDBTypes, true, couponStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CouponStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := CouponStores().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CouponStores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCouponStoresSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CouponStore{}
	if err = randomize.Struct(seed, o, couponStoreDBTypes, true, couponStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CouponStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CouponStoreSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CouponStores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCouponStoresExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CouponStore{}
	if err = randomize.Struct(seed, o, couponStoreDBTypes, true, couponStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CouponStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CouponStoreExists(ctx, tx, o.CouponID)
	if err != nil {
		t.Errorf("Unable to check if CouponStore exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CouponStoreExists to return true, but got false.")
	}
}

func testCouponStoresFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CouponStore{}
	if err = randomize.Struct(seed, o, couponStoreDBTypes, true, couponStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CouponStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	couponStoreFound, err := FindCouponStore(ctx, tx, o.CouponID)
	if err != nil {
		t.Error(err)
	}

	if couponStoreFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCouponStoresBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CouponStore{}
	if err = randomize.Struct(seed, o, couponStoreDBTypes, true, couponStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CouponStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = CouponStores().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCouponStoresOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CouponStore{}
	if err = randomize.Struct(seed, o, couponStoreDBTypes, true, couponStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CouponStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := CouponStores().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCouponStoresAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	couponStoreOne := &CouponStore{}
	couponStoreTwo := &CouponStore{}
	if err = randomize.Struct(seed, couponStoreOne, couponStoreDBTypes, false, couponStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CouponStore struct: %s", err)
	}
	if err = randomize.Struct(seed, couponStoreTwo, couponStoreDBTypes, false, couponStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CouponStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = couponStoreOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = couponStoreTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CouponStores().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCouponStoresCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	couponStoreOne := &CouponStore{}
	couponStoreTwo := &CouponStore{}
	if err = randomize.Struct(seed, couponStoreOne, couponStoreDBTypes, false, couponStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CouponStore struct: %s", err)
	}
	if err = randomize.Struct(seed, couponStoreTwo, couponStoreDBTypes, false, couponStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CouponStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = couponStoreOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = couponStoreTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CouponStores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func couponStoreBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *CouponStore) error {
	*o = CouponStore{}
	return nil
}

func couponStoreAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *CouponStore) error {
	*o = CouponStore{}
	return nil
}

func couponStoreAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *CouponStore) error {
	*o = CouponStore{}
	return nil
}

func couponStoreBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CouponStore) error {
	*o = CouponStore{}
	return nil
}

func couponStoreAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CouponStore) error {
	*o = CouponStore{}
	return nil
}

func couponStoreBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CouponStore) error {
	*o = CouponStore{}
	return nil
}

func couponStoreAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CouponStore) error {
	*o = CouponStore{}
	return nil
}

func couponStoreBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CouponStore) error {
	*o = CouponStore{}
	return nil
}

func couponStoreAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CouponStore) error {
	*o = CouponStore{}
	return nil
}

func testCouponStoresHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &CouponStore{}
	o := &CouponStore{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, couponStoreDBTypes, false); err != nil {
		t.Errorf("Unable to randomize CouponStore object: %s", err)
	}

	AddCouponStoreHook(boil.BeforeInsertHook, couponStoreBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	couponStoreBeforeInsertHooks = []CouponStoreHook{}

	AddCouponStoreHook(boil.AfterInsertHook, couponStoreAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	couponStoreAfterInsertHooks = []CouponStoreHook{}

	AddCouponStoreHook(boil.AfterSelectHook, couponStoreAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	couponStoreAfterSelectHooks = []CouponStoreHook{}

	AddCouponStoreHook(boil.BeforeUpdateHook, couponStoreBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	couponStoreBeforeUpdateHooks = []CouponStoreHook{}

	AddCouponStoreHook(boil.AfterUpdateHook, couponStoreAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	couponStoreAfterUpdateHooks = []CouponStoreHook{}

	AddCouponStoreHook(boil.BeforeDeleteHook, couponStoreBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	couponStoreBeforeDeleteHooks = []CouponStoreHook{}

	AddCouponStoreHook(boil.AfterDeleteHook, couponStoreAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	couponStoreAfterDeleteHooks = []CouponStoreHook{}

	AddCouponStoreHook(boil.BeforeUpsertHook, couponStoreBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	couponStoreBeforeUpsertHooks = []CouponStoreHook{}

	AddCouponStoreHook(boil.AfterUpsertHook, couponStoreAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	couponStoreAfterUpsertHooks = []CouponStoreHook{}
}

func testCouponStoresInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CouponStore{}
	if err = randomize.Struct(seed, o, couponStoreDBTypes, true, couponStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CouponStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CouponStores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCouponStoresInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CouponStore{}
	if err = randomize.Struct(seed, o, couponStoreDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CouponStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(couponStoreColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := CouponStores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCouponStoreToOneCouponUsingCoupon(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CouponStore
	var foreign Coupon

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, couponStoreDBTypes, false, couponStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CouponStore struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, couponDBTypes, false, couponColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Coupon struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.CouponID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Coupon().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddCouponHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Coupon) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := CouponStoreSlice{&local}
	if err = local.L.LoadCoupon(ctx, tx, false, (*[]*CouponStore)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Coupon == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Coupon = nil
	if err = local.L.LoadCoupon(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Coupon == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testCouponStoreToOneStoreUsingStore(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CouponStore
	var foreign Store

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, couponStoreDBTypes, false, couponStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CouponStore struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, storeDBTypes, false, storeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Store struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.StoreID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Store().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddStoreHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Store) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := CouponStoreSlice{&local}
	if err = local.L.LoadStore(ctx, tx, false, (*[]*CouponStore)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Store == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Store = nil
	if err = local.L.LoadStore(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Store == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testCouponStoreToOneSetOpCouponUsingCoupon(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CouponStore
	var b, c Coupon

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, couponStoreDBTypes, false, strmangle.SetComplement(couponStorePrimaryKeyColumns, couponStoreColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, couponDBTypes, false, strmangle.SetComplement(couponPrimaryKeyColumns, couponColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, couponDBTypes, false, strmangle.SetComplement(couponPrimaryKeyColumns, couponColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Coupon{&b, &c} {
		err = a.SetCoupon(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Coupon != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CouponStore != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CouponID != x.ID {
			t.Error("foreign key was wrong value", a.CouponID)
		}

		if exists, err := CouponStoreExists(ctx, tx, a.CouponID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testCouponStoreToOneSetOpStoreUsingStore(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CouponStore
	var b, c Store

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, couponStoreDBTypes, false, strmangle.SetComplement(couponStorePrimaryKeyColumns, couponStoreColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, storeDBTypes, false, strmangle.SetComplement(storePrimaryKeyColumns, storeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, storeDBTypes, false, strmangle.SetComplement(storePrimaryKeyColumns, storeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Store{&b, &c} {
		err = a.SetStore(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Store != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CouponStores[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.StoreID != x.ID {
			t.Error("foreign key was wrong value", a.StoreID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.StoreID))
		reflect.Indirect(reflect.ValueOf(&a.StoreID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.StoreID != x.ID {
			t.Error("foreign key was wrong value", a.StoreID, x.ID)
		}
	}
}

func testCouponStoresReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CouponStore{}
	if err = randomize.Struct(seed, o, couponStoreDBTypes, true, couponStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CouponStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCouponStoresReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CouponStore{}
	if err = randomize.Struct(seed, o, couponStoreDBTypes, true, couponStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CouponStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CouponStoreSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCouponStoresSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CouponStore{}
	if err = randomize.Struct(seed, o, couponStoreDBTypes, true, couponStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CouponStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CouponStores().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	couponStoreDBTypes = map[string]string{`CouponID`: `uuid`, `StoreID`: `uuid`}
	_                  = bytes.MinRead
)

func testCouponStoresUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(couponStorePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(couponStoreAllColumns) == len(couponStorePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CouponStore{}
	if err = randomize.Struct(seed, o, couponStoreDBTypes, true, couponStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CouponStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CouponStores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, couponStoreDBTypes, true, couponStorePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CouponStore struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCouponStoresSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(couponStoreAllColumns) == len(couponStorePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CouponStore{}
	if err = randomize.Struct(seed, o, couponStoreDBTypes, true, couponStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CouponStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CouponStores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, couponStoreDBTypes, true, couponStorePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CouponStore struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(couponStoreAllColumns, couponStorePrimaryKeyColumns) {
		fields = couponStoreAllColumns
	} else {
		fields = strmangle.SetComplement(
			couponStoreAllColumns,
			couponStorePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CouponStoreSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCouponStoresUpsert(t *testing.T) {
	t.Parallel()

	if len(couponStoreAllColumns) == len(couponStorePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := CouponStore{}
	if err = randomize.Struct(seed, &o, couponStoreDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CouponStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CouponStore: %s", err)
	}

	count, err := CouponStores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, couponStoreDBTypes, false, couponStorePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CouponStore struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CouponStore: %s", err)
	}

	count, err = CouponStores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
