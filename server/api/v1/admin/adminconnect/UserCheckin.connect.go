// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/admin/UserCheckin.proto

package adminconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	admin "server/api/v1/admin"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// UserCheckinControllerName is the fully-qualified name of the UserCheckinController service.
	UserCheckinControllerName = "server.admin.UserCheckinController"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserCheckinControllerGetAllRecentProcedure is the fully-qualified name of the
	// UserCheckinController's GetAllRecent RPC.
	UserCheckinControllerGetAllRecentProcedure = "/server.admin.UserCheckinController/GetAllRecent"
	// UserCheckinControllerGetUserLogProcedure is the fully-qualified name of the
	// UserCheckinController's GetUserLog RPC.
	UserCheckinControllerGetUserLogProcedure = "/server.admin.UserCheckinController/GetUserLog"
)

// UserCheckinControllerClient is a client for the server.admin.UserCheckinController service.
type UserCheckinControllerClient interface {
	GetAllRecent(context.Context, *connect_go.Request[admin.GetRecentAllCheckinRequest]) (*connect_go.Response[admin.CheckinsResponse], error)
	GetUserLog(context.Context, *connect_go.Request[admin.UserCheckinRequest]) (*connect_go.Response[admin.CheckinsResponse], error)
}

// NewUserCheckinControllerClient constructs a client for the server.admin.UserCheckinController
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserCheckinControllerClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) UserCheckinControllerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userCheckinControllerClient{
		getAllRecent: connect_go.NewClient[admin.GetRecentAllCheckinRequest, admin.CheckinsResponse](
			httpClient,
			baseURL+UserCheckinControllerGetAllRecentProcedure,
			opts...,
		),
		getUserLog: connect_go.NewClient[admin.UserCheckinRequest, admin.CheckinsResponse](
			httpClient,
			baseURL+UserCheckinControllerGetUserLogProcedure,
			opts...,
		),
	}
}

// userCheckinControllerClient implements UserCheckinControllerClient.
type userCheckinControllerClient struct {
	getAllRecent *connect_go.Client[admin.GetRecentAllCheckinRequest, admin.CheckinsResponse]
	getUserLog   *connect_go.Client[admin.UserCheckinRequest, admin.CheckinsResponse]
}

// GetAllRecent calls server.admin.UserCheckinController.GetAllRecent.
func (c *userCheckinControllerClient) GetAllRecent(ctx context.Context, req *connect_go.Request[admin.GetRecentAllCheckinRequest]) (*connect_go.Response[admin.CheckinsResponse], error) {
	return c.getAllRecent.CallUnary(ctx, req)
}

// GetUserLog calls server.admin.UserCheckinController.GetUserLog.
func (c *userCheckinControllerClient) GetUserLog(ctx context.Context, req *connect_go.Request[admin.UserCheckinRequest]) (*connect_go.Response[admin.CheckinsResponse], error) {
	return c.getUserLog.CallUnary(ctx, req)
}

// UserCheckinControllerHandler is an implementation of the server.admin.UserCheckinController
// service.
type UserCheckinControllerHandler interface {
	GetAllRecent(context.Context, *connect_go.Request[admin.GetRecentAllCheckinRequest]) (*connect_go.Response[admin.CheckinsResponse], error)
	GetUserLog(context.Context, *connect_go.Request[admin.UserCheckinRequest]) (*connect_go.Response[admin.CheckinsResponse], error)
}

// NewUserCheckinControllerHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserCheckinControllerHandler(svc UserCheckinControllerHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	userCheckinControllerGetAllRecentHandler := connect_go.NewUnaryHandler(
		UserCheckinControllerGetAllRecentProcedure,
		svc.GetAllRecent,
		opts...,
	)
	userCheckinControllerGetUserLogHandler := connect_go.NewUnaryHandler(
		UserCheckinControllerGetUserLogProcedure,
		svc.GetUserLog,
		opts...,
	)
	return "/server.admin.UserCheckinController/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserCheckinControllerGetAllRecentProcedure:
			userCheckinControllerGetAllRecentHandler.ServeHTTP(w, r)
		case UserCheckinControllerGetUserLogProcedure:
			userCheckinControllerGetUserLogHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserCheckinControllerHandler returns CodeUnimplemented from all methods.
type UnimplementedUserCheckinControllerHandler struct{}

func (UnimplementedUserCheckinControllerHandler) GetAllRecent(context.Context, *connect_go.Request[admin.GetRecentAllCheckinRequest]) (*connect_go.Response[admin.CheckinsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.admin.UserCheckinController.GetAllRecent is not implemented"))
}

func (UnimplementedUserCheckinControllerHandler) GetUserLog(context.Context, *connect_go.Request[admin.UserCheckinRequest]) (*connect_go.Response[admin.CheckinsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.admin.UserCheckinController.GetUserLog is not implemented"))
}
