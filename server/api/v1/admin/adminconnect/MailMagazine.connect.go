// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/admin/MailMagazine.proto

package adminconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	admin "server/api/v1/admin"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// MailMagazineControllerName is the fully-qualified name of the MailMagazineController service.
	MailMagazineControllerName = "server.admin.MailMagazineController"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MailMagazineControllerGetListProcedure is the fully-qualified name of the
	// MailMagazineController's GetList RPC.
	MailMagazineControllerGetListProcedure = "/server.admin.MailMagazineController/GetList"
	// MailMagazineControllerCreateDraftProcedure is the fully-qualified name of the
	// MailMagazineController's CreateDraft RPC.
	MailMagazineControllerCreateDraftProcedure = "/server.admin.MailMagazineController/CreateDraft"
	// MailMagazineControllerUpdateProcedure is the fully-qualified name of the MailMagazineController's
	// Update RPC.
	MailMagazineControllerUpdateProcedure = "/server.admin.MailMagazineController/Update"
	// MailMagazineControllerDeleteProcedure is the fully-qualified name of the MailMagazineController's
	// Delete RPC.
	MailMagazineControllerDeleteProcedure = "/server.admin.MailMagazineController/Delete"
	// MailMagazineControllerSendProcedure is the fully-qualified name of the MailMagazineController's
	// Send RPC.
	MailMagazineControllerSendProcedure = "/server.admin.MailMagazineController/Send"
)

// MailMagazineControllerClient is a client for the server.admin.MailMagazineController service.
type MailMagazineControllerClient interface {
	GetList(context.Context, *connect_go.Request[admin.GetMailMagazineListRequest]) (*connect_go.Response[admin.MailMagazinesResponse], error)
	CreateDraft(context.Context, *connect_go.Request[admin.CreateDraftRequest]) (*connect_go.Response[admin.MailMagazine], error)
	Update(context.Context, *connect_go.Request[admin.UpdateRequest]) (*connect_go.Response[admin.MailMagazine], error)
	Delete(context.Context, *connect_go.Request[admin.DeleteRequest]) (*connect_go.Response[emptypb.Empty], error)
	Send(context.Context, *connect_go.Request[admin.SendRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewMailMagazineControllerClient constructs a client for the server.admin.MailMagazineController
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMailMagazineControllerClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) MailMagazineControllerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &mailMagazineControllerClient{
		getList: connect_go.NewClient[admin.GetMailMagazineListRequest, admin.MailMagazinesResponse](
			httpClient,
			baseURL+MailMagazineControllerGetListProcedure,
			opts...,
		),
		createDraft: connect_go.NewClient[admin.CreateDraftRequest, admin.MailMagazine](
			httpClient,
			baseURL+MailMagazineControllerCreateDraftProcedure,
			opts...,
		),
		update: connect_go.NewClient[admin.UpdateRequest, admin.MailMagazine](
			httpClient,
			baseURL+MailMagazineControllerUpdateProcedure,
			opts...,
		),
		delete: connect_go.NewClient[admin.DeleteRequest, emptypb.Empty](
			httpClient,
			baseURL+MailMagazineControllerDeleteProcedure,
			opts...,
		),
		send: connect_go.NewClient[admin.SendRequest, emptypb.Empty](
			httpClient,
			baseURL+MailMagazineControllerSendProcedure,
			opts...,
		),
	}
}

// mailMagazineControllerClient implements MailMagazineControllerClient.
type mailMagazineControllerClient struct {
	getList     *connect_go.Client[admin.GetMailMagazineListRequest, admin.MailMagazinesResponse]
	createDraft *connect_go.Client[admin.CreateDraftRequest, admin.MailMagazine]
	update      *connect_go.Client[admin.UpdateRequest, admin.MailMagazine]
	delete      *connect_go.Client[admin.DeleteRequest, emptypb.Empty]
	send        *connect_go.Client[admin.SendRequest, emptypb.Empty]
}

// GetList calls server.admin.MailMagazineController.GetList.
func (c *mailMagazineControllerClient) GetList(ctx context.Context, req *connect_go.Request[admin.GetMailMagazineListRequest]) (*connect_go.Response[admin.MailMagazinesResponse], error) {
	return c.getList.CallUnary(ctx, req)
}

// CreateDraft calls server.admin.MailMagazineController.CreateDraft.
func (c *mailMagazineControllerClient) CreateDraft(ctx context.Context, req *connect_go.Request[admin.CreateDraftRequest]) (*connect_go.Response[admin.MailMagazine], error) {
	return c.createDraft.CallUnary(ctx, req)
}

// Update calls server.admin.MailMagazineController.Update.
func (c *mailMagazineControllerClient) Update(ctx context.Context, req *connect_go.Request[admin.UpdateRequest]) (*connect_go.Response[admin.MailMagazine], error) {
	return c.update.CallUnary(ctx, req)
}

// Delete calls server.admin.MailMagazineController.Delete.
func (c *mailMagazineControllerClient) Delete(ctx context.Context, req *connect_go.Request[admin.DeleteRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.delete.CallUnary(ctx, req)
}

// Send calls server.admin.MailMagazineController.Send.
func (c *mailMagazineControllerClient) Send(ctx context.Context, req *connect_go.Request[admin.SendRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.send.CallUnary(ctx, req)
}

// MailMagazineControllerHandler is an implementation of the server.admin.MailMagazineController
// service.
type MailMagazineControllerHandler interface {
	GetList(context.Context, *connect_go.Request[admin.GetMailMagazineListRequest]) (*connect_go.Response[admin.MailMagazinesResponse], error)
	CreateDraft(context.Context, *connect_go.Request[admin.CreateDraftRequest]) (*connect_go.Response[admin.MailMagazine], error)
	Update(context.Context, *connect_go.Request[admin.UpdateRequest]) (*connect_go.Response[admin.MailMagazine], error)
	Delete(context.Context, *connect_go.Request[admin.DeleteRequest]) (*connect_go.Response[emptypb.Empty], error)
	Send(context.Context, *connect_go.Request[admin.SendRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewMailMagazineControllerHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMailMagazineControllerHandler(svc MailMagazineControllerHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mailMagazineControllerGetListHandler := connect_go.NewUnaryHandler(
		MailMagazineControllerGetListProcedure,
		svc.GetList,
		opts...,
	)
	mailMagazineControllerCreateDraftHandler := connect_go.NewUnaryHandler(
		MailMagazineControllerCreateDraftProcedure,
		svc.CreateDraft,
		opts...,
	)
	mailMagazineControllerUpdateHandler := connect_go.NewUnaryHandler(
		MailMagazineControllerUpdateProcedure,
		svc.Update,
		opts...,
	)
	mailMagazineControllerDeleteHandler := connect_go.NewUnaryHandler(
		MailMagazineControllerDeleteProcedure,
		svc.Delete,
		opts...,
	)
	mailMagazineControllerSendHandler := connect_go.NewUnaryHandler(
		MailMagazineControllerSendProcedure,
		svc.Send,
		opts...,
	)
	return "/server.admin.MailMagazineController/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MailMagazineControllerGetListProcedure:
			mailMagazineControllerGetListHandler.ServeHTTP(w, r)
		case MailMagazineControllerCreateDraftProcedure:
			mailMagazineControllerCreateDraftHandler.ServeHTTP(w, r)
		case MailMagazineControllerUpdateProcedure:
			mailMagazineControllerUpdateHandler.ServeHTTP(w, r)
		case MailMagazineControllerDeleteProcedure:
			mailMagazineControllerDeleteHandler.ServeHTTP(w, r)
		case MailMagazineControllerSendProcedure:
			mailMagazineControllerSendHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMailMagazineControllerHandler returns CodeUnimplemented from all methods.
type UnimplementedMailMagazineControllerHandler struct{}

func (UnimplementedMailMagazineControllerHandler) GetList(context.Context, *connect_go.Request[admin.GetMailMagazineListRequest]) (*connect_go.Response[admin.MailMagazinesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.admin.MailMagazineController.GetList is not implemented"))
}

func (UnimplementedMailMagazineControllerHandler) CreateDraft(context.Context, *connect_go.Request[admin.CreateDraftRequest]) (*connect_go.Response[admin.MailMagazine], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.admin.MailMagazineController.CreateDraft is not implemented"))
}

func (UnimplementedMailMagazineControllerHandler) Update(context.Context, *connect_go.Request[admin.UpdateRequest]) (*connect_go.Response[admin.MailMagazine], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.admin.MailMagazineController.Update is not implemented"))
}

func (UnimplementedMailMagazineControllerHandler) Delete(context.Context, *connect_go.Request[admin.DeleteRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.admin.MailMagazineController.Delete is not implemented"))
}

func (UnimplementedMailMagazineControllerHandler) Send(context.Context, *connect_go.Request[admin.SendRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.admin.MailMagazineController.Send is not implemented"))
}
