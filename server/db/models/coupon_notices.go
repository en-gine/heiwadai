// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CouponNotice is an object representing the database table.
type CouponNotice struct {
	CouponID string `boil:"coupon_id" json:"coupon_id" toml:"coupon_id" yaml:"coupon_id"`
	Notice   string `boil:"notice" json:"notice" toml:"notice" yaml:"notice"`

	R *couponNoticeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L couponNoticeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CouponNoticeColumns = struct {
	CouponID string
	Notice   string
}{
	CouponID: "coupon_id",
	Notice:   "notice",
}

var CouponNoticeTableColumns = struct {
	CouponID string
	Notice   string
}{
	CouponID: "coupon_notices.coupon_id",
	Notice:   "coupon_notices.notice",
}

// Generated where

var CouponNoticeWhere = struct {
	CouponID whereHelperstring
	Notice   whereHelperstring
}{
	CouponID: whereHelperstring{field: "\"coupon_notices\".\"coupon_id\""},
	Notice:   whereHelperstring{field: "\"coupon_notices\".\"notice\""},
}

// CouponNoticeRels is where relationship names are stored.
var CouponNoticeRels = struct {
	Coupon string
}{
	Coupon: "Coupon",
}

// couponNoticeR is where relationships are stored.
type couponNoticeR struct {
	Coupon *Coupon `boil:"Coupon" json:"Coupon" toml:"Coupon" yaml:"Coupon"`
}

// NewStruct creates a new relationship struct
func (*couponNoticeR) NewStruct() *couponNoticeR {
	return &couponNoticeR{}
}

func (r *couponNoticeR) GetCoupon() *Coupon {
	if r == nil {
		return nil
	}
	return r.Coupon
}

// couponNoticeL is where Load methods for each relationship are stored.
type couponNoticeL struct{}

var (
	couponNoticeAllColumns            = []string{"coupon_id", "notice"}
	couponNoticeColumnsWithoutDefault = []string{"coupon_id", "notice"}
	couponNoticeColumnsWithDefault    = []string{}
	couponNoticePrimaryKeyColumns     = []string{"coupon_id"}
	couponNoticeGeneratedColumns      = []string{}
)

type (
	// CouponNoticeSlice is an alias for a slice of pointers to CouponNotice.
	// This should almost always be used instead of []CouponNotice.
	CouponNoticeSlice []*CouponNotice
	// CouponNoticeHook is the signature for custom CouponNotice hook methods
	CouponNoticeHook func(context.Context, boil.ContextExecutor, *CouponNotice) error

	couponNoticeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	couponNoticeType                 = reflect.TypeOf(&CouponNotice{})
	couponNoticeMapping              = queries.MakeStructMapping(couponNoticeType)
	couponNoticePrimaryKeyMapping, _ = queries.BindMapping(couponNoticeType, couponNoticeMapping, couponNoticePrimaryKeyColumns)
	couponNoticeInsertCacheMut       sync.RWMutex
	couponNoticeInsertCache          = make(map[string]insertCache)
	couponNoticeUpdateCacheMut       sync.RWMutex
	couponNoticeUpdateCache          = make(map[string]updateCache)
	couponNoticeUpsertCacheMut       sync.RWMutex
	couponNoticeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var couponNoticeAfterSelectHooks []CouponNoticeHook

var couponNoticeBeforeInsertHooks []CouponNoticeHook
var couponNoticeAfterInsertHooks []CouponNoticeHook

var couponNoticeBeforeUpdateHooks []CouponNoticeHook
var couponNoticeAfterUpdateHooks []CouponNoticeHook

var couponNoticeBeforeDeleteHooks []CouponNoticeHook
var couponNoticeAfterDeleteHooks []CouponNoticeHook

var couponNoticeBeforeUpsertHooks []CouponNoticeHook
var couponNoticeAfterUpsertHooks []CouponNoticeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CouponNotice) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range couponNoticeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CouponNotice) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range couponNoticeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CouponNotice) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range couponNoticeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CouponNotice) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range couponNoticeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CouponNotice) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range couponNoticeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CouponNotice) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range couponNoticeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CouponNotice) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range couponNoticeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CouponNotice) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range couponNoticeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CouponNotice) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range couponNoticeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCouponNoticeHook registers your hook function for all future operations.
func AddCouponNoticeHook(hookPoint boil.HookPoint, couponNoticeHook CouponNoticeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		couponNoticeAfterSelectHooks = append(couponNoticeAfterSelectHooks, couponNoticeHook)
	case boil.BeforeInsertHook:
		couponNoticeBeforeInsertHooks = append(couponNoticeBeforeInsertHooks, couponNoticeHook)
	case boil.AfterInsertHook:
		couponNoticeAfterInsertHooks = append(couponNoticeAfterInsertHooks, couponNoticeHook)
	case boil.BeforeUpdateHook:
		couponNoticeBeforeUpdateHooks = append(couponNoticeBeforeUpdateHooks, couponNoticeHook)
	case boil.AfterUpdateHook:
		couponNoticeAfterUpdateHooks = append(couponNoticeAfterUpdateHooks, couponNoticeHook)
	case boil.BeforeDeleteHook:
		couponNoticeBeforeDeleteHooks = append(couponNoticeBeforeDeleteHooks, couponNoticeHook)
	case boil.AfterDeleteHook:
		couponNoticeAfterDeleteHooks = append(couponNoticeAfterDeleteHooks, couponNoticeHook)
	case boil.BeforeUpsertHook:
		couponNoticeBeforeUpsertHooks = append(couponNoticeBeforeUpsertHooks, couponNoticeHook)
	case boil.AfterUpsertHook:
		couponNoticeAfterUpsertHooks = append(couponNoticeAfterUpsertHooks, couponNoticeHook)
	}
}

// One returns a single couponNotice record from the query.
func (q couponNoticeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CouponNotice, error) {
	o := &CouponNotice{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for coupon_notices")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CouponNotice records from the query.
func (q couponNoticeQuery) All(ctx context.Context, exec boil.ContextExecutor) (CouponNoticeSlice, error) {
	var o []*CouponNotice

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CouponNotice slice")
	}

	if len(couponNoticeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CouponNotice records in the query.
func (q couponNoticeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count coupon_notices rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q couponNoticeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if coupon_notices exists")
	}

	return count > 0, nil
}

// Coupon pointed to by the foreign key.
func (o *CouponNotice) Coupon(mods ...qm.QueryMod) couponQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CouponID),
	}

	queryMods = append(queryMods, mods...)

	return Coupons(queryMods...)
}

// LoadCoupon allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (couponNoticeL) LoadCoupon(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCouponNotice interface{}, mods queries.Applicator) error {
	var slice []*CouponNotice
	var object *CouponNotice

	if singular {
		var ok bool
		object, ok = maybeCouponNotice.(*CouponNotice)
		if !ok {
			object = new(CouponNotice)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCouponNotice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCouponNotice))
			}
		}
	} else {
		s, ok := maybeCouponNotice.(*[]*CouponNotice)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCouponNotice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCouponNotice))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &couponNoticeR{}
		}
		args = append(args, object.CouponID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &couponNoticeR{}
			}

			for _, a := range args {
				if a == obj.CouponID {
					continue Outer
				}
			}

			args = append(args, obj.CouponID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`coupon`),
		qm.WhereIn(`coupon.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Coupon")
	}

	var resultSlice []*Coupon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Coupon")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for coupon")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for coupon")
	}

	if len(couponAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Coupon = foreign
		if foreign.R == nil {
			foreign.R = &couponR{}
		}
		foreign.R.CouponNotice = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CouponID == foreign.ID {
				local.R.Coupon = foreign
				if foreign.R == nil {
					foreign.R = &couponR{}
				}
				foreign.R.CouponNotice = local
				break
			}
		}
	}

	return nil
}

// SetCoupon of the couponNotice to the related item.
// Sets o.R.Coupon to related.
// Adds o to related.R.CouponNotice.
func (o *CouponNotice) SetCoupon(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Coupon) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"coupon_notices\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"coupon_id"}),
		strmangle.WhereClause("\"", "\"", 2, couponNoticePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.CouponID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CouponID = related.ID
	if o.R == nil {
		o.R = &couponNoticeR{
			Coupon: related,
		}
	} else {
		o.R.Coupon = related
	}

	if related.R == nil {
		related.R = &couponR{
			CouponNotice: o,
		}
	} else {
		related.R.CouponNotice = o
	}

	return nil
}

// CouponNotices retrieves all the records using an executor.
func CouponNotices(mods ...qm.QueryMod) couponNoticeQuery {
	mods = append(mods, qm.From("\"coupon_notices\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"coupon_notices\".*"})
	}

	return couponNoticeQuery{q}
}

// FindCouponNotice retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCouponNotice(ctx context.Context, exec boil.ContextExecutor, couponID string, selectCols ...string) (*CouponNotice, error) {
	couponNoticeObj := &CouponNotice{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"coupon_notices\" where \"coupon_id\"=$1", sel,
	)

	q := queries.Raw(query, couponID)

	err := q.Bind(ctx, exec, couponNoticeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from coupon_notices")
	}

	if err = couponNoticeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return couponNoticeObj, err
	}

	return couponNoticeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CouponNotice) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no coupon_notices provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(couponNoticeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	couponNoticeInsertCacheMut.RLock()
	cache, cached := couponNoticeInsertCache[key]
	couponNoticeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			couponNoticeAllColumns,
			couponNoticeColumnsWithDefault,
			couponNoticeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(couponNoticeType, couponNoticeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(couponNoticeType, couponNoticeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"coupon_notices\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"coupon_notices\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into coupon_notices")
	}

	if !cached {
		couponNoticeInsertCacheMut.Lock()
		couponNoticeInsertCache[key] = cache
		couponNoticeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CouponNotice.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CouponNotice) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	couponNoticeUpdateCacheMut.RLock()
	cache, cached := couponNoticeUpdateCache[key]
	couponNoticeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			couponNoticeAllColumns,
			couponNoticePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update coupon_notices, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"coupon_notices\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, couponNoticePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(couponNoticeType, couponNoticeMapping, append(wl, couponNoticePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update coupon_notices row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for coupon_notices")
	}

	if !cached {
		couponNoticeUpdateCacheMut.Lock()
		couponNoticeUpdateCache[key] = cache
		couponNoticeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q couponNoticeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for coupon_notices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for coupon_notices")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CouponNoticeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), couponNoticePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"coupon_notices\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, couponNoticePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in couponNotice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all couponNotice")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CouponNotice) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no coupon_notices provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(couponNoticeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	couponNoticeUpsertCacheMut.RLock()
	cache, cached := couponNoticeUpsertCache[key]
	couponNoticeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			couponNoticeAllColumns,
			couponNoticeColumnsWithDefault,
			couponNoticeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			couponNoticeAllColumns,
			couponNoticePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert coupon_notices, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(couponNoticePrimaryKeyColumns))
			copy(conflict, couponNoticePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"coupon_notices\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(couponNoticeType, couponNoticeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(couponNoticeType, couponNoticeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert coupon_notices")
	}

	if !cached {
		couponNoticeUpsertCacheMut.Lock()
		couponNoticeUpsertCache[key] = cache
		couponNoticeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CouponNotice record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CouponNotice) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CouponNotice provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), couponNoticePrimaryKeyMapping)
	sql := "DELETE FROM \"coupon_notices\" WHERE \"coupon_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from coupon_notices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for coupon_notices")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q couponNoticeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no couponNoticeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from coupon_notices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for coupon_notices")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CouponNoticeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(couponNoticeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), couponNoticePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"coupon_notices\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, couponNoticePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from couponNotice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for coupon_notices")
	}

	if len(couponNoticeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CouponNotice) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCouponNotice(ctx, exec, o.CouponID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CouponNoticeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CouponNoticeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), couponNoticePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"coupon_notices\".* FROM \"coupon_notices\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, couponNoticePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CouponNoticeSlice")
	}

	*o = slice

	return nil
}

// CouponNoticeExists checks if the CouponNotice row exists.
func CouponNoticeExists(ctx context.Context, exec boil.ContextExecutor, couponID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"coupon_notices\" where \"coupon_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, couponID)
	}
	row := exec.QueryRowContext(ctx, sql, couponID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if coupon_notices exists")
	}

	return exists, nil
}

// Exists checks if the CouponNotice row exists.
func (o *CouponNotice) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CouponNoticeExists(ctx, exec, o.CouponID)
}
