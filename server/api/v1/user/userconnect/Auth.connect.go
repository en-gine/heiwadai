// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/user/Auth.proto

package userconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	user "server/api/v1/user"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AuthControllerName is the fully-qualified name of the AuthController service.
	AuthControllerName = "server.user.AuthController"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthControllerRegisterProcedure is the fully-qualified name of the AuthController's Register RPC.
	AuthControllerRegisterProcedure = "/server.user.AuthController/Register"
	// AuthControllerSignUpProcedure is the fully-qualified name of the AuthController's SignUp RPC.
	AuthControllerSignUpProcedure = "/server.user.AuthController/SignUp"
	// AuthControllerSignInProcedure is the fully-qualified name of the AuthController's SignIn RPC.
	AuthControllerSignInProcedure = "/server.user.AuthController/SignIn"
	// AuthControllerSignOutProcedure is the fully-qualified name of the AuthController's SignOut RPC.
	AuthControllerSignOutProcedure = "/server.user.AuthController/SignOut"
	// AuthControllerRefreshProcedure is the fully-qualified name of the AuthController's Refresh RPC.
	AuthControllerRefreshProcedure = "/server.user.AuthController/Refresh"
	// AuthControllerResetPasswordMailProcedure is the fully-qualified name of the AuthController's
	// ResetPasswordMail RPC.
	AuthControllerResetPasswordMailProcedure = "/server.user.AuthController/ResetPasswordMail"
	// AuthControllerUpdatePasswordProcedure is the fully-qualified name of the AuthController's
	// UpdatePassword RPC.
	AuthControllerUpdatePasswordProcedure = "/server.user.AuthController/UpdatePassword"
	// AuthControllerUpdateEmailProcedure is the fully-qualified name of the AuthController's
	// UpdateEmail RPC.
	AuthControllerUpdateEmailProcedure = "/server.user.AuthController/UpdateEmail"
)

// AuthControllerClient is a client for the server.user.AuthController service.
type AuthControllerClient interface {
	Register(context.Context, *connect_go.Request[user.UserRegisterRequest]) (*connect_go.Response[emptypb.Empty], error)
	SignUp(context.Context, *connect_go.Request[user.UserAuthRequest]) (*connect_go.Response[emptypb.Empty], error)
	SignIn(context.Context, *connect_go.Request[user.UserAuthRequest]) (*connect_go.Response[user.UserAuthResponse], error)
	SignOut(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[emptypb.Empty], error)
	Refresh(context.Context, *connect_go.Request[user.RefreshTokenRequest]) (*connect_go.Response[emptypb.Empty], error)
	ResetPasswordMail(context.Context, *connect_go.Request[user.ResetPasswordRequest]) (*connect_go.Response[emptypb.Empty], error)
	UpdatePassword(context.Context, *connect_go.Request[user.UpdatePasswordRequest]) (*connect_go.Response[emptypb.Empty], error)
	UpdateEmail(context.Context, *connect_go.Request[user.UpdateEmailRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewAuthControllerClient constructs a client for the server.user.AuthController service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthControllerClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AuthControllerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authControllerClient{
		register: connect_go.NewClient[user.UserRegisterRequest, emptypb.Empty](
			httpClient,
			baseURL+AuthControllerRegisterProcedure,
			opts...,
		),
		signUp: connect_go.NewClient[user.UserAuthRequest, emptypb.Empty](
			httpClient,
			baseURL+AuthControllerSignUpProcedure,
			opts...,
		),
		signIn: connect_go.NewClient[user.UserAuthRequest, user.UserAuthResponse](
			httpClient,
			baseURL+AuthControllerSignInProcedure,
			opts...,
		),
		signOut: connect_go.NewClient[emptypb.Empty, emptypb.Empty](
			httpClient,
			baseURL+AuthControllerSignOutProcedure,
			opts...,
		),
		refresh: connect_go.NewClient[user.RefreshTokenRequest, emptypb.Empty](
			httpClient,
			baseURL+AuthControllerRefreshProcedure,
			opts...,
		),
		resetPasswordMail: connect_go.NewClient[user.ResetPasswordRequest, emptypb.Empty](
			httpClient,
			baseURL+AuthControllerResetPasswordMailProcedure,
			opts...,
		),
		updatePassword: connect_go.NewClient[user.UpdatePasswordRequest, emptypb.Empty](
			httpClient,
			baseURL+AuthControllerUpdatePasswordProcedure,
			opts...,
		),
		updateEmail: connect_go.NewClient[user.UpdateEmailRequest, emptypb.Empty](
			httpClient,
			baseURL+AuthControllerUpdateEmailProcedure,
			opts...,
		),
	}
}

// authControllerClient implements AuthControllerClient.
type authControllerClient struct {
	register          *connect_go.Client[user.UserRegisterRequest, emptypb.Empty]
	signUp            *connect_go.Client[user.UserAuthRequest, emptypb.Empty]
	signIn            *connect_go.Client[user.UserAuthRequest, user.UserAuthResponse]
	signOut           *connect_go.Client[emptypb.Empty, emptypb.Empty]
	refresh           *connect_go.Client[user.RefreshTokenRequest, emptypb.Empty]
	resetPasswordMail *connect_go.Client[user.ResetPasswordRequest, emptypb.Empty]
	updatePassword    *connect_go.Client[user.UpdatePasswordRequest, emptypb.Empty]
	updateEmail       *connect_go.Client[user.UpdateEmailRequest, emptypb.Empty]
}

// Register calls server.user.AuthController.Register.
func (c *authControllerClient) Register(ctx context.Context, req *connect_go.Request[user.UserRegisterRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.register.CallUnary(ctx, req)
}

// SignUp calls server.user.AuthController.SignUp.
func (c *authControllerClient) SignUp(ctx context.Context, req *connect_go.Request[user.UserAuthRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.signUp.CallUnary(ctx, req)
}

// SignIn calls server.user.AuthController.SignIn.
func (c *authControllerClient) SignIn(ctx context.Context, req *connect_go.Request[user.UserAuthRequest]) (*connect_go.Response[user.UserAuthResponse], error) {
	return c.signIn.CallUnary(ctx, req)
}

// SignOut calls server.user.AuthController.SignOut.
func (c *authControllerClient) SignOut(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[emptypb.Empty], error) {
	return c.signOut.CallUnary(ctx, req)
}

// Refresh calls server.user.AuthController.Refresh.
func (c *authControllerClient) Refresh(ctx context.Context, req *connect_go.Request[user.RefreshTokenRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.refresh.CallUnary(ctx, req)
}

// ResetPasswordMail calls server.user.AuthController.ResetPasswordMail.
func (c *authControllerClient) ResetPasswordMail(ctx context.Context, req *connect_go.Request[user.ResetPasswordRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.resetPasswordMail.CallUnary(ctx, req)
}

// UpdatePassword calls server.user.AuthController.UpdatePassword.
func (c *authControllerClient) UpdatePassword(ctx context.Context, req *connect_go.Request[user.UpdatePasswordRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.updatePassword.CallUnary(ctx, req)
}

// UpdateEmail calls server.user.AuthController.UpdateEmail.
func (c *authControllerClient) UpdateEmail(ctx context.Context, req *connect_go.Request[user.UpdateEmailRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.updateEmail.CallUnary(ctx, req)
}

// AuthControllerHandler is an implementation of the server.user.AuthController service.
type AuthControllerHandler interface {
	Register(context.Context, *connect_go.Request[user.UserRegisterRequest]) (*connect_go.Response[emptypb.Empty], error)
	SignUp(context.Context, *connect_go.Request[user.UserAuthRequest]) (*connect_go.Response[emptypb.Empty], error)
	SignIn(context.Context, *connect_go.Request[user.UserAuthRequest]) (*connect_go.Response[user.UserAuthResponse], error)
	SignOut(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[emptypb.Empty], error)
	Refresh(context.Context, *connect_go.Request[user.RefreshTokenRequest]) (*connect_go.Response[emptypb.Empty], error)
	ResetPasswordMail(context.Context, *connect_go.Request[user.ResetPasswordRequest]) (*connect_go.Response[emptypb.Empty], error)
	UpdatePassword(context.Context, *connect_go.Request[user.UpdatePasswordRequest]) (*connect_go.Response[emptypb.Empty], error)
	UpdateEmail(context.Context, *connect_go.Request[user.UpdateEmailRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewAuthControllerHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthControllerHandler(svc AuthControllerHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	authControllerRegisterHandler := connect_go.NewUnaryHandler(
		AuthControllerRegisterProcedure,
		svc.Register,
		opts...,
	)
	authControllerSignUpHandler := connect_go.NewUnaryHandler(
		AuthControllerSignUpProcedure,
		svc.SignUp,
		opts...,
	)
	authControllerSignInHandler := connect_go.NewUnaryHandler(
		AuthControllerSignInProcedure,
		svc.SignIn,
		opts...,
	)
	authControllerSignOutHandler := connect_go.NewUnaryHandler(
		AuthControllerSignOutProcedure,
		svc.SignOut,
		opts...,
	)
	authControllerRefreshHandler := connect_go.NewUnaryHandler(
		AuthControllerRefreshProcedure,
		svc.Refresh,
		opts...,
	)
	authControllerResetPasswordMailHandler := connect_go.NewUnaryHandler(
		AuthControllerResetPasswordMailProcedure,
		svc.ResetPasswordMail,
		opts...,
	)
	authControllerUpdatePasswordHandler := connect_go.NewUnaryHandler(
		AuthControllerUpdatePasswordProcedure,
		svc.UpdatePassword,
		opts...,
	)
	authControllerUpdateEmailHandler := connect_go.NewUnaryHandler(
		AuthControllerUpdateEmailProcedure,
		svc.UpdateEmail,
		opts...,
	)
	return "/server.user.AuthController/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthControllerRegisterProcedure:
			authControllerRegisterHandler.ServeHTTP(w, r)
		case AuthControllerSignUpProcedure:
			authControllerSignUpHandler.ServeHTTP(w, r)
		case AuthControllerSignInProcedure:
			authControllerSignInHandler.ServeHTTP(w, r)
		case AuthControllerSignOutProcedure:
			authControllerSignOutHandler.ServeHTTP(w, r)
		case AuthControllerRefreshProcedure:
			authControllerRefreshHandler.ServeHTTP(w, r)
		case AuthControllerResetPasswordMailProcedure:
			authControllerResetPasswordMailHandler.ServeHTTP(w, r)
		case AuthControllerUpdatePasswordProcedure:
			authControllerUpdatePasswordHandler.ServeHTTP(w, r)
		case AuthControllerUpdateEmailProcedure:
			authControllerUpdateEmailHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthControllerHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthControllerHandler struct{}

func (UnimplementedAuthControllerHandler) Register(context.Context, *connect_go.Request[user.UserRegisterRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.user.AuthController.Register is not implemented"))
}

func (UnimplementedAuthControllerHandler) SignUp(context.Context, *connect_go.Request[user.UserAuthRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.user.AuthController.SignUp is not implemented"))
}

func (UnimplementedAuthControllerHandler) SignIn(context.Context, *connect_go.Request[user.UserAuthRequest]) (*connect_go.Response[user.UserAuthResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.user.AuthController.SignIn is not implemented"))
}

func (UnimplementedAuthControllerHandler) SignOut(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.user.AuthController.SignOut is not implemented"))
}

func (UnimplementedAuthControllerHandler) Refresh(context.Context, *connect_go.Request[user.RefreshTokenRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.user.AuthController.Refresh is not implemented"))
}

func (UnimplementedAuthControllerHandler) ResetPasswordMail(context.Context, *connect_go.Request[user.ResetPasswordRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.user.AuthController.ResetPasswordMail is not implemented"))
}

func (UnimplementedAuthControllerHandler) UpdatePassword(context.Context, *connect_go.Request[user.UpdatePasswordRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.user.AuthController.UpdatePassword is not implemented"))
}

func (UnimplementedAuthControllerHandler) UpdateEmail(context.Context, *connect_go.Request[user.UpdateEmailRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.user.AuthController.UpdateEmail is not implemented"))
}
