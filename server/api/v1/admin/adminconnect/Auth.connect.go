// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/admin/Auth.proto

package adminconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	admin "server/api/v1/admin"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AuthControllerName is the fully-qualified name of the AuthController service.
	AuthControllerName = "server.admin.AuthController"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthControllerCallProcedure is the fully-qualified name of the AuthController's Call RPC.
	AuthControllerCallProcedure = "/server.admin.AuthController/Call"
)

// AuthControllerClient is a client for the server.admin.AuthController service.
type AuthControllerClient interface {
	Call(context.Context, *connect_go.Request[admin.AdminAuthRequest]) (*connect_go.Response[admin.AdminAuthResponse], error)
}

// NewAuthControllerClient constructs a client for the server.admin.AuthController service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthControllerClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AuthControllerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authControllerClient{
		call: connect_go.NewClient[admin.AdminAuthRequest, admin.AdminAuthResponse](
			httpClient,
			baseURL+AuthControllerCallProcedure,
			opts...,
		),
	}
}

// authControllerClient implements AuthControllerClient.
type authControllerClient struct {
	call *connect_go.Client[admin.AdminAuthRequest, admin.AdminAuthResponse]
}

// Call calls server.admin.AuthController.Call.
func (c *authControllerClient) Call(ctx context.Context, req *connect_go.Request[admin.AdminAuthRequest]) (*connect_go.Response[admin.AdminAuthResponse], error) {
	return c.call.CallUnary(ctx, req)
}

// AuthControllerHandler is an implementation of the server.admin.AuthController service.
type AuthControllerHandler interface {
	Call(context.Context, *connect_go.Request[admin.AdminAuthRequest]) (*connect_go.Response[admin.AdminAuthResponse], error)
}

// NewAuthControllerHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthControllerHandler(svc AuthControllerHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	authControllerCallHandler := connect_go.NewUnaryHandler(
		AuthControllerCallProcedure,
		svc.Call,
		opts...,
	)
	return "/server.admin.AuthController/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthControllerCallProcedure:
			authControllerCallHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthControllerHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthControllerHandler struct{}

func (UnimplementedAuthControllerHandler) Call(context.Context, *connect_go.Request[admin.AdminAuthRequest]) (*connect_go.Response[admin.AdminAuthResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.admin.AuthController.Call is not implemented"))
}
