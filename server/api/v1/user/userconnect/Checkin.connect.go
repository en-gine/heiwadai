// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/user/Checkin.proto

package userconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	user "server/api/v1/user"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// CheckinControllerName is the fully-qualified name of the CheckinController service.
	CheckinControllerName = "server.user.CheckinController"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CheckinControllerGetStampCardProcedure is the fully-qualified name of the CheckinController's
	// GetStampCard RPC.
	CheckinControllerGetStampCardProcedure = "/server.user.CheckinController/GetStampCard"
	// CheckinControllerCheckinProcedure is the fully-qualified name of the CheckinController's Checkin
	// RPC.
	CheckinControllerCheckinProcedure = "/server.user.CheckinController/Checkin"
)

// CheckinControllerClient is a client for the server.user.CheckinController service.
type CheckinControllerClient interface {
	GetStampCard(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[user.StampCardResponse], error)
	Checkin(context.Context, *connect_go.Request[user.CheckinRequest]) (*connect_go.Response[user.CheckinResponse], error)
}

// NewCheckinControllerClient constructs a client for the server.user.CheckinController service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCheckinControllerClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) CheckinControllerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &checkinControllerClient{
		getStampCard: connect_go.NewClient[emptypb.Empty, user.StampCardResponse](
			httpClient,
			baseURL+CheckinControllerGetStampCardProcedure,
			opts...,
		),
		checkin: connect_go.NewClient[user.CheckinRequest, user.CheckinResponse](
			httpClient,
			baseURL+CheckinControllerCheckinProcedure,
			opts...,
		),
	}
}

// checkinControllerClient implements CheckinControllerClient.
type checkinControllerClient struct {
	getStampCard *connect_go.Client[emptypb.Empty, user.StampCardResponse]
	checkin      *connect_go.Client[user.CheckinRequest, user.CheckinResponse]
}

// GetStampCard calls server.user.CheckinController.GetStampCard.
func (c *checkinControllerClient) GetStampCard(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[user.StampCardResponse], error) {
	return c.getStampCard.CallUnary(ctx, req)
}

// Checkin calls server.user.CheckinController.Checkin.
func (c *checkinControllerClient) Checkin(ctx context.Context, req *connect_go.Request[user.CheckinRequest]) (*connect_go.Response[user.CheckinResponse], error) {
	return c.checkin.CallUnary(ctx, req)
}

// CheckinControllerHandler is an implementation of the server.user.CheckinController service.
type CheckinControllerHandler interface {
	GetStampCard(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[user.StampCardResponse], error)
	Checkin(context.Context, *connect_go.Request[user.CheckinRequest]) (*connect_go.Response[user.CheckinResponse], error)
}

// NewCheckinControllerHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCheckinControllerHandler(svc CheckinControllerHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	checkinControllerGetStampCardHandler := connect_go.NewUnaryHandler(
		CheckinControllerGetStampCardProcedure,
		svc.GetStampCard,
		opts...,
	)
	checkinControllerCheckinHandler := connect_go.NewUnaryHandler(
		CheckinControllerCheckinProcedure,
		svc.Checkin,
		opts...,
	)
	return "/server.user.CheckinController/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CheckinControllerGetStampCardProcedure:
			checkinControllerGetStampCardHandler.ServeHTTP(w, r)
		case CheckinControllerCheckinProcedure:
			checkinControllerCheckinHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCheckinControllerHandler returns CodeUnimplemented from all methods.
type UnimplementedCheckinControllerHandler struct{}

func (UnimplementedCheckinControllerHandler) GetStampCard(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[user.StampCardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.user.CheckinController.GetStampCard is not implemented"))
}

func (UnimplementedCheckinControllerHandler) Checkin(context.Context, *connect_go.Request[user.CheckinRequest]) (*connect_go.Response[user.CheckinResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.user.CheckinController.Checkin is not implemented"))
}
