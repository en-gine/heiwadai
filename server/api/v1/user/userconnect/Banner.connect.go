// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/user/Banner.proto

package userconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	user "server/api/v1/user"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// BannerControllerName is the fully-qualified name of the BannerController service.
	BannerControllerName = "server.user.BannerController"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BannerControllerGetBannerProcedure is the fully-qualified name of the BannerController's
	// GetBanner RPC.
	BannerControllerGetBannerProcedure = "/server.user.BannerController/GetBanner"
)

// BannerControllerClient is a client for the server.user.BannerController service.
type BannerControllerClient interface {
	// TOPバナーの取得 URLと画像URLを配列で返す
	GetBanner(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[user.BannerResponse], error)
}

// NewBannerControllerClient constructs a client for the server.user.BannerController service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBannerControllerClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) BannerControllerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &bannerControllerClient{
		getBanner: connect_go.NewClient[emptypb.Empty, user.BannerResponse](
			httpClient,
			baseURL+BannerControllerGetBannerProcedure,
			opts...,
		),
	}
}

// bannerControllerClient implements BannerControllerClient.
type bannerControllerClient struct {
	getBanner *connect_go.Client[emptypb.Empty, user.BannerResponse]
}

// GetBanner calls server.user.BannerController.GetBanner.
func (c *bannerControllerClient) GetBanner(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[user.BannerResponse], error) {
	return c.getBanner.CallUnary(ctx, req)
}

// BannerControllerHandler is an implementation of the server.user.BannerController service.
type BannerControllerHandler interface {
	// TOPバナーの取得 URLと画像URLを配列で返す
	GetBanner(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[user.BannerResponse], error)
}

// NewBannerControllerHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBannerControllerHandler(svc BannerControllerHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	bannerControllerGetBannerHandler := connect_go.NewUnaryHandler(
		BannerControllerGetBannerProcedure,
		svc.GetBanner,
		opts...,
	)
	return "/server.user.BannerController/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BannerControllerGetBannerProcedure:
			bannerControllerGetBannerHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBannerControllerHandler returns CodeUnimplemented from all methods.
type UnimplementedBannerControllerHandler struct{}

func (UnimplementedBannerControllerHandler) GetBanner(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[user.BannerResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.user.BannerController.GetBanner is not implemented"))
}
