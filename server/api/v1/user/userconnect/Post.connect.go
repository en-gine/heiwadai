// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/user/Post.proto

package userconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	user "server/api/v1/user"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PostControllerName is the fully-qualified name of the PostController service.
	PostControllerName = "server.user.PostController"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PostControllerGetPostByIDProcedure is the fully-qualified name of the PostController's
	// GetPostByID RPC.
	PostControllerGetPostByIDProcedure = "/server.user.PostController/GetPostByID"
	// PostControllerGetPostsProcedure is the fully-qualified name of the PostController's GetPosts RPC.
	PostControllerGetPostsProcedure = "/server.user.PostController/GetPosts"
)

// PostControllerClient is a client for the server.user.PostController service.
type PostControllerClient interface {
	GetPostByID(context.Context, *connect_go.Request[user.PostRequest]) (*connect_go.Response[user.PostResponse], error)
	GetPosts(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[user.PostsResponse], error)
}

// NewPostControllerClient constructs a client for the server.user.PostController service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPostControllerClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PostControllerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &postControllerClient{
		getPostByID: connect_go.NewClient[user.PostRequest, user.PostResponse](
			httpClient,
			baseURL+PostControllerGetPostByIDProcedure,
			opts...,
		),
		getPosts: connect_go.NewClient[emptypb.Empty, user.PostsResponse](
			httpClient,
			baseURL+PostControllerGetPostsProcedure,
			opts...,
		),
	}
}

// postControllerClient implements PostControllerClient.
type postControllerClient struct {
	getPostByID *connect_go.Client[user.PostRequest, user.PostResponse]
	getPosts    *connect_go.Client[emptypb.Empty, user.PostsResponse]
}

// GetPostByID calls server.user.PostController.GetPostByID.
func (c *postControllerClient) GetPostByID(ctx context.Context, req *connect_go.Request[user.PostRequest]) (*connect_go.Response[user.PostResponse], error) {
	return c.getPostByID.CallUnary(ctx, req)
}

// GetPosts calls server.user.PostController.GetPosts.
func (c *postControllerClient) GetPosts(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[user.PostsResponse], error) {
	return c.getPosts.CallUnary(ctx, req)
}

// PostControllerHandler is an implementation of the server.user.PostController service.
type PostControllerHandler interface {
	GetPostByID(context.Context, *connect_go.Request[user.PostRequest]) (*connect_go.Response[user.PostResponse], error)
	GetPosts(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[user.PostsResponse], error)
}

// NewPostControllerHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPostControllerHandler(svc PostControllerHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	postControllerGetPostByIDHandler := connect_go.NewUnaryHandler(
		PostControllerGetPostByIDProcedure,
		svc.GetPostByID,
		opts...,
	)
	postControllerGetPostsHandler := connect_go.NewUnaryHandler(
		PostControllerGetPostsProcedure,
		svc.GetPosts,
		opts...,
	)
	return "/server.user.PostController/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PostControllerGetPostByIDProcedure:
			postControllerGetPostByIDHandler.ServeHTTP(w, r)
		case PostControllerGetPostsProcedure:
			postControllerGetPostsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPostControllerHandler returns CodeUnimplemented from all methods.
type UnimplementedPostControllerHandler struct{}

func (UnimplementedPostControllerHandler) GetPostByID(context.Context, *connect_go.Request[user.PostRequest]) (*connect_go.Response[user.PostResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.user.PostController.GetPostByID is not implemented"))
}

func (UnimplementedPostControllerHandler) GetPosts(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[user.PostsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.user.PostController.GetPosts is not implemented"))
}
